<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面试准备第二天-数据库复习1</title>
    <link href="/2022/07/02/10%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A01/"/>
    <url>/2022/07/02/10%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h1 id="CREATE-x2F-DROP-x2F-ALTER-语句"><a href="#CREATE-x2F-DROP-x2F-ALTER-语句" class="headerlink" title="CREATE&#x2F;DROP&#x2F;ALTER 语句"></a><font color=red>CREATE&#x2F;DROP&#x2F;ALTER 语句</font></h1><h2 id="【模式】"><a href="#【模式】" class="headerlink" title="【模式】"></a>【模式】</h2><h3 id="定义模式-CREATE-SCHEMA"><a href="#定义模式-CREATE-SCHEMA" class="headerlink" title="定义模式 CREATE SCHEMA"></a><mark>定义模式 CREATE SCHEMA</mark></h3><p>CREATE SCHEMA 模式名 AUTHORIZATION 用户名;</p><p>eg:为用户WANG定义一个S-T模式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> SCHEMA &quot;S-T&quot; <span class="hljs-keyword">AUTHORIZATION</span> WANG; <br></code></pre></td></tr></table></figure><p>eg.为用户WANG定义一个模式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> SCHEMA <span class="hljs-keyword">AUTHORIZATION</span> WANG； <span class="hljs-operator">/</span><span class="hljs-operator">/</span>未定义模式名的情况下，默认模式名为用户名<br></code></pre></td></tr></table></figure><h3 id="删除模式-DROP-SCHEMA-gt"><a href="#删除模式-DROP-SCHEMA-gt" class="headerlink" title="删除模式 DROP SCHEMA&gt;"></a><mark>删除模式 DROP SCHEMA</mark>&gt;</h3><p>DROP SCHEMA 模式名 CASCADE； &#x2F;&#x2F;级联：把该模式中所有的表、视图之类的一起删除</p><p>DROP SCHEMA 模式名 RESTRICT； &#x2F;&#x2F;限制：若该模式下已定义了表或者视图等等，则拒绝执行删除语句</p><h2 id="【基本表】"><a href="#【基本表】" class="headerlink" title="【基本表】"></a>【基本表】</h2><h3 id="定义基本表-CREATE-TABLE"><a href="#定义基本表-CREATE-TABLE" class="headerlink" title="定义基本表 CREATE TABLE"></a><mark>定义基本表 CREATE TABLE</mark></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名<br>（列名<span class="hljs-number">1</span> 数据类型 列级完整性约束条件，<span class="hljs-operator">/</span><span class="hljs-operator">/</span>如没有列级完整约束条件，可以不写<br>    列名n数据类型 列级完整性约束条件，<br>    表级完整性约束条件<span class="hljs-number">1</span>，<br>    表级完整性约束条件n<br>    );<br></code></pre></td></tr></table></figure><h4 id="（1）数据类型"><a href="#（1）数据类型" class="headerlink" title="（1）数据类型"></a>（1）数据类型</h4><table><thead><tr><th>CHAR(n)</th><th>长度为n的字符型</th></tr></thead><tbody><tr><td>VARCHAR(n)</td><td>最大长度为n的变长字符型</td></tr><tr><td>NUMBER(n)</td><td>长度为n的数字型</td></tr><tr><td>INT</td><td>长整型（4B）</td></tr><tr><td>SMALLINT</td><td>短整型（2B）</td></tr><tr><td>BIGINT</td><td>大整型（8B）</td></tr><tr><td>FLOAT(n)</td><td>精度至少为n位数字的浮点数</td></tr><tr><td>DATE</td><td>日期，格式为YYYY—MM—DD</td></tr><tr><td>TIME</td><td>时间，格式为HH：MM：SS</td></tr></tbody></table><h4 id="（2）列级完整性约束条件"><a href="#（2）列级完整性约束条件" class="headerlink" title="（2）列级完整性约束条件"></a>（2）列级完整性约束条件</h4><p>​PRIMARY KEY &#x2F;&#x2F;主码：当只有一个主码时，可直接在对应的属性列标注</p><p>​NOT NULL &#x2F;&#x2F;非空：表示该属性列不能取空值</p><p>​UNIQUE &#x2F;&#x2F;唯一值：表示该属性列只能取唯一值</p><p>​CHECK（条件） &#x2F;&#x2F;检查：检查该列是否满足某个条件，如CHECK（某属性&gt;20）</p><h4 id="（3）表级完整性约束条件"><a href="#（3）表级完整性约束条件" class="headerlink" title="（3）表级完整性约束条件"></a>（3）表级完整性约束条件</h4><p>​PRIMARY KEY（列名 1， 列名n） &#x2F;&#x2F;实体完整性：当主码由多个属性构成时，必须作为表级完整性进行定义FOREIGN KEY（列名 1） REFERENCES 被参照表（列名1） &#x2F;&#x2F;参照完整性</p><p>​eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TAB1 <br>(Sno <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>), Cno NUMBER(<span class="hljs-number">10</span>), <br> Grade <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY(Sno, Cno),<br> <span class="hljs-keyword">FOREIGN</span> KEY(Sno) <span class="hljs-keyword">REFERENCES</span> TAB2(Sno)<br>);<br></code></pre></td></tr></table></figure><h3 id="在模式中定义表"><a href="#在模式中定义表" class="headerlink" title="在模式中定义表"></a><mark>在模式中定义表</mark></h3><p>一个模式包含多种基本表，有三种方式在模式中定义基本表。</p><h4 id="（1）创建表时指出模式"><a href="#（1）创建表时指出模式" class="headerlink" title="（1）创建表时指出模式"></a>（1）创建表时指出模式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 模式名.表名<br>(列定义语句,<br>完整性约束语句<br>);<br></code></pre></td></tr></table></figure><h4 id="（2）创建模式时直接定义表"><a href="#（2）创建模式时直接定义表" class="headerlink" title="（2）创建模式时直接定义表"></a>（2）创建模式时直接定义表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> SCHEMA 模式名 <span class="hljs-keyword">AUTHORIZATION</span> 用户名<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名<br>（列定义语句,<br>完整性约束语句）;<br></code></pre></td></tr></table></figure><h4 id="（3）设置所属的模式"><a href="#（3）设置所属的模式" class="headerlink" title="（3）设置所属的模式"></a>（3）设置所属的模式</h4><p>这样在创建表的时候不用给出模式名</p><h3 id="修改基本表-ALTER-TABLE"><a href="#修改基本表-ALTER-TABLE" class="headerlink" title="修改基本表 ALTER TABLE"></a><mark>修改基本表 ALTER TABLE</mark></h3><h4 id="（1）增加新的属性列"><a href="#（1）增加新的属性列" class="headerlink" title="（1）增加新的属性列"></a>（1）增加新的属性列</h4><p>​ALTER TABLE 表名 ADD新列名 数据类型 完整性约束条件；</p><p>​eg.向SC表中增加时间列，数据类型为日期型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> <span class="hljs-type">Time</span> <span class="hljs-type">DATE</span>; <br></code></pre></td></tr></table></figure><h4 id="（2）增加列级完整性约束条件"><a href="#（2）增加列级完整性约束条件" class="headerlink" title="（2）增加列级完整性约束条件"></a>（2）增加列级完整性约束条件</h4><p>​ALTER TABLE 表名 ADD 列级完整性约束条件；</p><p>​eg.向SC表中增加Cname列必须取唯一值的约束条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span>(Cname);<br></code></pre></td></tr></table></figure><h4 id="（3）增加表级完整性约束条件"><a href="#（3）增加表级完整性约束条件" class="headerlink" title="（3）增加表级完整性约束条件"></a>（3）增加表级完整性约束条件</h4><p>​ALTER TABLE 表名 ADD 表级完整性约束条件；</p><p>​eg.向SC表中增加Cno为外码，参照表是Student表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> KEY(Cno) <span class="hljs-keyword">REFERENCES</span> Student(Cno); <br></code></pre></td></tr></table></figure><h4 id="（4）删除列"><a href="#（4）删除列" class="headerlink" title="（4）删除列"></a>（4）删除列</h4><p>​ALTER TABLE 表名DROP 列名CASCADE； &#x2F;&#x2F;级联：引用了该列的其他对象（例如视图）一起删除ALTER TABLE 表名 DROP 列名 RESTRICT； &#x2F;&#x2F;限制：若该列被其他对象引用，则拒绝删除</p><h4 id="（5）删除指定的完整性约束条件"><a href="#（5）删除指定的完整性约束条件" class="headerlink" title="（5）删除指定的完整性约束条件"></a>（5）删除指定的完整性约束条件</h4><p>​ALTER TABLE 表名 DROP CONSTRAINT 完整性约束名 CASCADE； &#x2F;&#x2F;级联</p><p>​ALTER TABLE 表名 DROP CONSTRAINT 完整性约束名 RESTRICT； &#x2F;&#x2F;限制</p><h4 id="（6）修改列"><a href="#（6）修改列" class="headerlink" title="（6）修改列"></a>（6）修改列</h4><p>​ALTER TABLE 表名 ALTER COLUMN 列名 数据类型；</p><p>​eg.将SC表中原有的Sage（假设是字符型）修改为整型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> Sage <span class="hljs-type">INT</span>; <br></code></pre></td></tr></table></figure><h3 id="删除基本表DROP-TABLE"><a href="#删除基本表DROP-TABLE" class="headerlink" title="删除基本表DROP TABLE"></a><mark>删除基本表DROP TABLE</mark></h3><p>（1） DROP TABLE 表名 CASCADE； &#x2F;&#x2F;级联：删除该表时，相关的依赖对象，例如视图，都会被删除</p><p>（2） DROP TALBE 表名 RESTRICT； &#x2F;&#x2F;限制：删除该表时，若被其他表的约束所引用（例如其他表的   CHECK、FOREIGN KEY 等等），或者有视图等等，都不能被删除</p><h2 id="【索引】"><a href="#【索引】" class="headerlink" title="【索引】"></a>【索引】</h2><h3 id="建立索引-CREATE-UNIQUE-x2F-CLUSTER-INDEX"><a href="#建立索引-CREATE-UNIQUE-x2F-CLUSTER-INDEX" class="headerlink" title="建立索引 CREATE UNIQUE&#x2F;CLUSTER INDEX "></a><mark>建立索引 CREATE UNIQUE&#x2F;CLUSTER INDEX </mark></h3><h4 id="（1）建立唯一索引"><a href="#（1）建立唯一索引" class="headerlink" title="（1）建立唯一索引"></a>（1）建立唯一索引</h4><p>​CREATE UNIQUE INDEX 索引名 ON 表名（列名1次序，列名n次序）；</p><p>​eg.为SC表按学号升序和课程号降序建立唯一索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX SCno <span class="hljs-keyword">ON</span> SC(Sno <span class="hljs-keyword">ASC</span>, Cno <span class="hljs-keyword">DESC</span>); <br></code></pre></td></tr></table></figure><h4 id="（2）建立聚簇索引"><a href="#（2）建立聚簇索引" class="headerlink" title="（2）建立聚簇索引"></a>（2）建立聚簇索引</h4><p>​CREATE CLUSTER INDEX 索引名 ON 表名（列名1次序，列名n次序）；</p><h3 id="修改索引（重命名）-ALTER-INDEX"><a href="#修改索引（重命名）-ALTER-INDEX" class="headerlink" title="修改索引（重命名） ALTER INDEX"></a><mark>修改索引（重命名） ALTER INDEX</mark></h3><p>​ALTER INDEX 旧索引名 RENAME TO 新索引名;</p><p>​eg.将SC表的SCno索引名改为 SCSno</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> INDEX SCno RENAME <span class="hljs-keyword">TO</span> SCSno;<br></code></pre></td></tr></table></figure><h3 id="删除索引DROP-INDEX"><a href="#删除索引DROP-INDEX" class="headerlink" title="删除索引DROP INDEX"></a><mark>删除索引DROP INDEX</mark></h3><p>​DROP INDEX 索引名:</p><p>​eg.删除SC表的 SCSno索引；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX SCSno;<br></code></pre></td></tr></table></figure><h1 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a><font color=red>SELECT 语句</font></h1><h3 id="一般格式"><a href="#一般格式" class="headerlink" title="一般格式"></a><mark>一般格式</mark></h3><p>​SELECT DISTINCT&#x2F;ALL 目标列表达式 &#x2F;&#x2F;要显示的属性列</p><p>​FROM 表名&#x2F;视图名&#x2F;&#x2F;查询的对象</p><p>​WHERE 条件表达式&#x2F;&#x2F;查询条件</p><p>​GROUP BY 列名 </p><p>​HAVING 条件表达式&#x2F;&#x2F;查询结果分组</p><p>​ORDER BY 列名 次序；&#x2F;&#x2F;最终查询结果排序</p><h2 id="【基本查询】"><a href="#【基本查询】" class="headerlink" title="【基本查询】"></a>【基本查询】</h2><h3 id="SELECT-目标列表达式"><a href="#SELECT-目标列表达式" class="headerlink" title="SELECT 目标列表达式"></a><mark>SELECT 目标列表达式</mark></h3><h4 id="（1）查询指定列：SELECT列名1，列名n"><a href="#（1）查询指定列：SELECT列名1，列名n" class="headerlink" title="（1）查询指定列：SELECT列名1，列名n"></a>（1）查询指定列：SELECT列名1，列名n</h4><p>​eg.查询TAB表的X属性列和Y属性列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> X, Y <span class="hljs-keyword">FROM</span> TAB；<br></code></pre></td></tr></table></figure><h4 id="（2）查询全部列：-SELECT"><a href="#（2）查询全部列：-SELECT" class="headerlink" title="（2）查询全部列： SELECT *"></a>（2）查询全部列： SELECT *</h4><p>​eg.查询TAB表的全部记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> TAB；<br></code></pre></td></tr></table></figure><h4 id="（3）查询计算后的值：-SELECT表达式-x2F-x2F-可以是算术表达式、字符串常量、函数等等"><a href="#（3）查询计算后的值：-SELECT表达式-x2F-x2F-可以是算术表达式、字符串常量、函数等等" class="headerlink" title="（3）查询计算后的值： SELECT表达式&#x2F;&#x2F;可以是算术表达式、字符串常量、函数等等"></a>（3）查询计算后的值： SELECT表达式&#x2F;&#x2F;可以是算术表达式、字符串常量、函数等等</h4><p>​eg.查询TAB表（假定有一项属性age 记录人们的年龄）中人们的出生日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">2022</span><span class="hljs-operator">-</span>age <span class="hljs-keyword">FROM</span> TAB；<br></code></pre></td></tr></table></figure><h4 id="（4）改变查询结果的列标题：SELECT列名-别名"><a href="#（4）改变查询结果的列标题：SELECT列名-别名" class="headerlink" title="（4）改变查询结果的列标题：SELECT列名 别名"></a>（4）改变查询结果的列标题：SELECT列名 别名</h4><p>​eg.查询TAB表中的X和Y属性列，并在结果中用别名x1和y1显示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Xx1, Y y1<br><span class="hljs-keyword">FROM</span> TAB；<br></code></pre></td></tr></table></figure><h4 id="（5）取消查询结果中的重复行：SELECT-DISTINCT-列名"><a href="#（5）取消查询结果中的重复行：SELECT-DISTINCT-列名" class="headerlink" title="（5）取消查询结果中的重复行：SELECT DISTINCT 列名"></a>（5）取消查询结果中的重复行：SELECT DISTINCT 列名</h4><p>​eg.查询TAB表中的X属性，并去掉结果中的重复列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> X， <span class="hljs-operator">/</span><span class="hljs-operator">/</span>如果没有用 <span class="hljs-keyword">DISTINCT</span>， 则默认为 <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">FROM</span> TAB；<br></code></pre></td></tr></table></figure><h4 id="（6）聚集函数"><a href="#（6）聚集函数" class="headerlink" title="（6）聚集函数"></a>（6）聚集函数</h4><p>​<strong>注意：</strong>当聚集函数遇到空值时，都跳过空值，只处理非空值</p><p>​    聚集函数只能用于SELECT语句和GROUP BY中的HAVING 子句（见后部分）</p><p><strong>①统计元组的个数</strong></p><p>​COUNT （*） &#x2F;&#x2F;某个元组的一个或部分取空值时，不影响统计结果</p><p>​eg.查询Student 表中学生的总数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> SC；<br></code></pre></td></tr></table></figure><p><strong>②统计某一列值的个数COUNT (DISTINCT&#x2F;ALL 列名)</strong></p><p>​如果指定DISTINCT，则表示计算时要取消重复值。若不指定，则默认为ALL，表示不取消重复值</p><p><strong>③计算某一列值的平均数（该列必须为数值型）</strong></p><p>​AVG （DISTINCT&#x2F;ALL 列名）</p><p>​eg.计算SC表中的平均成绩（Grade）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(Grade)<br><span class="hljs-keyword">FROM</span> SC；<br></code></pre></td></tr></table></figure><p><strong>④计算某一列值的总和（该列必须为数值型）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">SUM （<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">/</span><span class="hljs-keyword">ALL</span> 列名）<br></code></pre></td></tr></table></figure><p><strong>⑤计算某一列值的最大值&#x2F;最小值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">MAX<span class="hljs-operator">/</span><span class="hljs-built_in">MIN</span> (<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">/</span><span class="hljs-keyword">ALL</span> 列名) <br></code></pre></td></tr></table></figure><h3 id="WHERE-条件表达式"><a href="#WHERE-条件表达式" class="headerlink" title="WHERE 条件表达式"></a><mark>WHERE 条件表达式</mark></h3><h4 id="（1）比较大小"><a href="#（1）比较大小" class="headerlink" title="（1）比较大小"></a>（1）比较大小</h4><p>常用比较运算符：&#x3D; &gt; &lt; &gt;&#x3D; &lt;&#x3D;   !&#x3D;(或者&lt;&gt;)   !&gt;  !&lt;  </p><p>eg.查询SC表中全体计算机学生的姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname <br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cs&#x27;</span>;<br></code></pre></td></tr></table></figure><p>eg.查询TAB表中X&gt;20的YSELECT Y</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FROM</span> TAB<br><span class="hljs-keyword">WHERE</span> X<span class="hljs-operator">&gt;</span><span class="hljs-number">20</span>; <br></code></pre></td></tr></table></figure><h4 id="（2）确定范围"><a href="#（2）确定范围" class="headerlink" title="（2）确定范围"></a>（2）确定范围</h4><p><strong>WHERE 列名 BETWEEN 最小值 AND 最大值；</strong></p><p>eg.查询TAB表上 age在20到30 之间的人的name和 sex</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, sex<br><span class="hljs-keyword">FROM</span> TAB<br><span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><p><strong>WHERE 列名 NOT BETWEEN 最小值 AND 最大值；</strong></p><p>eg.查询TAB表上age不在20到30之间的人的name 和sex</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, sex<br><span class="hljs-keyword">FROM</span> TAB<br><span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">30</span>; <br></code></pre></td></tr></table></figure><h4 id="（3）-确定集合"><a href="#（3）-确定集合" class="headerlink" title="（3） 确定集合"></a>（3） 确定集合</h4><p><strong>WHERE 列名 IN （’列名1’， ‘列名n’）；</strong></p><p>eg. 在SC表的Sdept列中查找属于计算机专业（CS）、数学专业（MA）、信息专业（IS）的学生姓名（S_name）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> S_name<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;CS&#x27;</span>, <span class="hljs-string">&#x27;MA&#x27;</span>, <span class="hljs-string">&#x27;IS&#x27;</span>);<br><span class="hljs-keyword">WHERE</span> 列名 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> （<span class="hljs-string">&#x27;列名1&#x27;</span>， <span class="hljs-string">&#x27;列名n&#x27;</span>）；<br></code></pre></td></tr></table></figure><p><strong>WHERE 列名 NOT IN （’列名1’， ‘列名n’）；</strong></p><p>eg. 在SC表的Sdept列中查找既不是计算机专业（CS）也不是数学专业（MA）的学生姓名（S_name）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> S_name<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;CS&#x27;</span>, <span class="hljs-string">&#x27;MA&#x27;</span>); <br></code></pre></td></tr></table></figure><h4 id="4-字符匹配"><a href="#4-字符匹配" class="headerlink" title="(4)字符匹配"></a>(4)字符匹配</h4><p>通配符：写在字符串当中，用来求一些有特殊条件的字符串</p><p><strong>% 表示任意长度（可以为0）的字符串。如a%b，表示以a开头，b结尾的任意长度字符串</strong></p><p><strong>_表示单个字符。如a_b，表示以a开头b结尾的长度为3的字符串</strong></p><p>注意：在ASCII 码表中，一个汉字的长度为2</p><p>转义字符：字符串中紧跟在转义字符后的字符”%或_’不再具有通配符的含义设置转义字符的语句为ESCAPE’符号’，该符号可以自己设置，一般采用’&#39;。例如需要查找的字符串为’50%’，那么应写’50%‘，否则会查找以50开头的不定长字符串</p><p><strong>WHERE 列名 LIKE ‘字符串’ ESCAPE ‘V’；</strong></p><p>eg. 在Student表中查找所有姓刘且全名为3个汉字的学生的Sname，Sno 和Ssex</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname, Sno, Ssex<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_-&#x27;</span>;<br></code></pre></td></tr></table></figure><p>eg. 在SC表中查找课程名（Cname）为DB_Design的课程号（Cno）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Cno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DBY Design&#x27;</span> <span class="hljs-keyword">ESCAPE</span> V<span class="hljs-string">&#x27;; </span><br><span class="hljs-string">WHERE 列名 NOT LIKE &quot;符&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;&#x27;</span>；<br></code></pre></td></tr></table></figure><p>eg.在Student表中查找所有不姓刘的学生的Sname</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;刘%&#x27;</span>; <br></code></pre></td></tr></table></figure><h4 id="5-空值查询"><a href="#5-空值查询" class="headerlink" title="(5)空值查询"></a>(5)空值查询</h4><p><strong>WHERE 列名 IS NULL；</strong></p><p>eg. 在SC表中查询缺少成绩（Grade）的学生的姓名（Sname）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">WHERE</span> 列名 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>；<br></code></pre></td></tr></table></figure><p>eg.查询全部有成绩（Grade）的学生的姓名（Sname）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>; <br></code></pre></td></tr></table></figure><h4 id="（6）多重条件查询"><a href="#（6）多重条件查询" class="headerlink" title="（6）多重条件查询"></a>（6）多重条件查询</h4><p>WHERE 条件表达式AND 条件表达式；</p><p>WHERE条件表达式 OR 条件表达式；</p><p>可以用AND 或者OR将上述各类条件表达式组合在一起。其中，AND的优先级大于OR</p><h3 id="GROUP-BY-列名-HAVING-条件表达式"><a href="#GROUP-BY-列名-HAVING-条件表达式" class="headerlink" title="GROUP BY 列名 HAVING 条件表达式"></a><mark>GROUP BY 列名 HAVING 条件表达式</mark></h3><p>用于将查询结果按某一列或多列的值分组，值相等的为一组</p><p>目的是细化聚集函数的作用对象，分组后聚集函数将作用于每一个组，每一组都有一个函数值</p><h4 id="（1）-GROUP-BY-列名"><a href="#（1）-GROUP-BY-列名" class="headerlink" title="（1） GROUP BY 列名"></a>（1） GROUP BY 列名</h4><p>eg.求SC表中，各个课程号（Cno）下相应的选课人数（Sno）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Cno, <span class="hljs-built_in">COUNT</span>(Sno)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno； <span class="hljs-operator">/</span><span class="hljs-operator">/</span>表示具有相同Cno 值的元组为一组，对每一组用COUNT进行计算，求得该组的人数<br></code></pre></td></tr></table></figure><h4 id="（2）-GROUP-BY-列名-HAVING-选条件"><a href="#（2）-GROUP-BY-列名-HAVING-选条件" class="headerlink" title="（2） GROUP BY 列名 HAVING 选条件"></a>（2） GROUP BY 列名 HAVING 选条件</h4><p>与WHERE 的区别：</p><ul><li>HAVING 用于从组中选择满足条件的组</li><li>WHERE 用于从基本表或视图中选择满足条件的元组（注意： WHERE子句不可以接聚集函数）</li></ul><p>eg. 在SC表中查询平均成绩（Grade）大于等于90的学生学号（Sno）和平均成绩（Grade）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno, Grade<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(Grade)<span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span><span class="hljs-number">90</span>; <br></code></pre></td></tr></table></figure><h3 id="ORDER-BY-次序"><a href="#ORDER-BY-次序" class="headerlink" title="ORDER BY 次序"></a><mark>ORDER BY 次序</mark></h3><p><strong>ORDER BY 列名1 列名n ASC</strong></p><p>对查询结果按照一个或多个属性列的升序排列（若不表明次序，默认为升序）</p><p><strong>ORDER BY 列名1 列名n DESC</strong></p><p>对查询结果按照一个或多个属性列的降序排列</p><p>eg.查序SC表中Cno为3的学生的Sno和Grade，结果按照Grade的降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno, Grade<br><span class="hljs-keyword">FROM</span> SCWHERE Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="【连接查询】"><a href="#【连接查询】" class="headerlink" title="【连接查询】"></a>【连接查询】</h2><h3 id="两表连接查询"><a href="#两表连接查询" class="headerlink" title="两表连接查询"></a><mark>两表连接查询</mark></h3><p><strong>WHERE 表名1.列名1比较运算符 表名2.列名2；&#x2F;&#x2F;当列名在参与连接的各表中唯一时，可省去表名前缀</strong></p><p>eg.查询Student 表中学生的情况以及SC表中他们对应的选课情况，要求在一个查询结果中展示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Student.<span class="hljs-operator">*</span>， SC.<span class="hljs-operator">*</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>若两个表中有相同名的属性列，自然连接<span class="hljs-keyword">FROM</span> Student, SC<br><span class="hljs-keyword">WHERE</span> Student.Sno <span class="hljs-operator">=</span> SC.Sno； <span class="hljs-operator">/</span><span class="hljs-operator">/</span>用 Sno作为连接字段，将两个表连接在一起<br><span class="hljs-comment">/*若想获得自然连接，则列举全部属性列，并去掉一个相同的属性列即可。可以将上述SELECT语句改写如下*/</span><br><span class="hljs-keyword">SELECT</span> Student.Sno, Sname, Ssex, Sage, Sdept, Cno, Grade<br></code></pre></td></tr></table></figure><p>eg. 在Student表和SC表中，查询选修了2号课程（Cno&#x3D;’2’）且成绩（Grade）在90分以上的学生学号（Sno）和姓名（Sname）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Student.Sno， Sname<br><span class="hljs-keyword">FROM</span> Student, SC<br><span class="hljs-keyword">WHERE</span> Student.Sno<span class="hljs-operator">=</span>SC.Sno <span class="hljs-keyword">AND</span> SC.Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">AND</span> SC.Grade <span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>； <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">AND</span> 用作多重条件<br></code></pre></td></tr></table></figure><h3 id="单表连接查询"><a href="#单表连接查询" class="headerlink" title="单表连接查询"></a><mark>单表连接查询</mark></h3><p>eg.在Course 表中查询先修课的先修课（即间接先修课），其中课程号为Cno，先修课程号为Cpno</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> FIRST.Cno, SECOND.Cpno<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>利用下述别名进行选择<br><span class="hljs-keyword">FROM</span> Course <span class="hljs-keyword">FIRST</span>， Course <span class="hljs-keyword">SECOND</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>为这个表取两个别名<br><span class="hljs-keyword">WHERE</span> FIRST.Cpno<span class="hljs-operator">=</span>SECOND.Cno;<br></code></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a><mark>外连接查询</mark></h3><p>将悬浮元组保留在结果关系中，没有属性值的位置填上NULL</p><h4 id="1-左外连接查询"><a href="#1-左外连接查询" class="headerlink" title="(1)左外连接查询"></a>(1)左外连接查询</h4><p><strong>FROM 表名1 LEFT OUTER JOIN 表名2 ON (连接条件); &#x2F;   &#x2F;也可以将ON 换成 USING，去掉结果中的重复值</strong></p><h4 id="2-右外连接查询"><a href="#2-右外连接查询" class="headerlink" title="(2)右外连接查询"></a>(2)右外连接查询</h4><p><strong>FROM 表名1 RIGHT OUTER JOIN 表名 2 ON (连接条件);</strong></p><p>eg. 以Student表为主体列，排出每个学生的基本情况和选课情况（SC表中），没选课的学生依旧保留在结果中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Student.Sno, Sname, Ssex, Sage, Sdept, Cno, Grade<br><span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> SC <span class="hljs-keyword">ON</span> (Student.Sno<span class="hljs-operator">=</span>SC.Sno); <span class="hljs-operator">/</span><span class="hljs-operator">/</span>左外连接 <br></code></pre></td></tr></table></figure><h3 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a><mark>多表连接查询</mark></h3><p><strong>WHERE 表名1.列名1&#x3D;表名2.列名2 AND表名2.列名2&#x3D;表名3.列名3</strong></p><p>多表连接一般是先进行两个表的连接操作，再将其连接结果与第三个表执行连接</p><p>eg. A Student 表、SC表、Course表中查询每个学生的学号（Sno）、姓名（Sname）、课程（Cname）和成绩（Grade）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Student.Sno, Sname, Cname, Grade <br><span class="hljs-keyword">FROM</span> Student, SC, Course<br><span class="hljs-keyword">WHERE</span> Student.Sno<span class="hljs-operator">=</span>SC.Sno <span class="hljs-keyword">AND</span> SC.Cno<span class="hljs-operator">=</span>Course.Cno;<br></code></pre></td></tr></table></figure><h2 id="【嵌套查询】"><a href="#【嵌套查询】" class="headerlink" title="【嵌套查询】"></a>【嵌套查询】</h2><p>查询块： SELECT—FROM—WHERE</p><p>嵌套查询：将一个查询块嵌套在另一个查询块的WHERE 子句或者HAVING子句</p><p>​     其中，上层的查询块称为外层查询&#x2F;父查询；下层的查询块称为内层查询&#x2F;子查询</p><p><strong>注意</strong>：子查询的SELECT 语句中不能使用ORDER BY子句，ORDER BY子句只能对最终查询结果排序</p><h2 id="IN-子查询"><a href="#IN-子查询" class="headerlink" title="IN-子查询"></a><mark>IN-子查询</mark></h2><p>父查询与子查询之间用IN连接</p><p><strong>WHERE 列名 IN (子查询)；</strong></p><p>eg.查找与刘晨同一个专业的同学</p><h4 id="①"><a href="#①" class="headerlink" title="①"></a>①</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sdept<br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘晨;</span><br></code></pre></td></tr></table></figure><p>查找结果为刘晨在CS专业，之后再查找CS专业的学生</p><h4 id="②"><a href="#②" class="headerlink" title="②"></a>②</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno, Sname, Sdept<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span>; <br></code></pre></td></tr></table></figure><p>将上述①②构造为嵌套查询 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno, Sname, Sdept <br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> Sdept <br>   <span class="hljs-keyword">FROM</span> Student<br>    <span class="hljs-keyword">WHERE</span> Sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘晨）： //本例的子查询条件不依赖于父查询，这类子查询称为不相关子查询</span><br></code></pre></td></tr></table></figure><h3 id="比较运算符—子查询"><a href="#比较运算符—子查询" class="headerlink" title="比较运算符—子查询"></a><mark>比较运算符—子查询</mark></h3><p>父查询与子查询之间用比较运算符连接</p><p><strong>WHERE 列名 比较运算符(子查询); &#x2F;&#x2F;当用户能确切知道内层查询返回的是单个值时，可用比较运算符连接</strong></p><p>eg.在SC表中，找出每个学生（Sno）超过他自己选修课程平均成绩（Grade）的课程号（Cno）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno, Cno <br><span class="hljs-keyword">FROM</span> SC x<span class="hljs-operator">/</span><span class="hljs-operator">/</span>x是表SC的别名，又称为元组变量，可以用来表示SC的一个元组<br><span class="hljs-keyword">WHERE</span> Grade <span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">FROM</span> SC y<br><span class="hljs-keyword">WHERE</span> y.Sno<span class="hljs-operator">=</span>x.Sno）；<br> <span class="hljs-comment">/*本例的子查询条件依赖于父查询，这类子查询称为相关子查询，整个查询称为相关嵌套查询*/</span><br></code></pre></td></tr></table></figure><h3 id="ANY-x2F-ALL-子查询"><a href="#ANY-x2F-ALL-子查询" class="headerlink" title="ANY&#x2F;ALL-子查询"></a><mark>ANY&#x2F;ALL-子查询</mark></h3><p><strong>WHERE 列名 比较运算符ANY&#x2F;ALL (子查询);&#x2F;&#x2F;有的系统中ANY 用SOME代替</strong></p><table><thead><tr><th>谓词</th><th>语义</th><th>与聚集函数或IN的等价转换</th></tr></thead><tbody><tr><td>&gt;ANY</td><td>大于子查询结果中的某个值</td><td>&gt;MIN</td></tr><tr><td>&gt;ALL</td><td>大于子查询结果中的所有值</td><td>&gt;MAX</td></tr><tr><td>&lt;ANY</td><td>小于子查询结果中的某个值</td><td>&lt;MAX</td></tr><tr><td>&lt;ALL</td><td>小于子查询结果中的所有值</td><td>&lt;MIN</td></tr><tr><td>&gt;&#x3D;ANY</td><td>大于等于子查询结果中的某个值</td><td>&gt;&#x3D;MIN</td></tr><tr><td>&gt;&#x3D;ALL</td><td>大于等于子查询结果中的所有值</td><td>&gt;&#x3D;MAX</td></tr><tr><td>&lt;&#x3D;ANY</td><td>小于等于子查询结果中的某个值</td><td>&lt;&#x3D;MAX</td></tr><tr><td>&lt;&#x3D;ALL</td><td>小于等于子查询结果中的所有值</td><td>&lt;&#x3D;MIN</td></tr><tr><td>&#x3D;ANY</td><td>等于子查询结果中的某个值</td><td>IN</td></tr><tr><td>&#x3D;ALL</td><td>等于子查询结果中的所有值</td><td>&#x2F;- -</td></tr><tr><td>&#x3D;(或&lt;&gt;)ANY</td><td>不等于子查询结果中的某个值</td><td>&#x2F;- -</td></tr><tr><td>!&#x3D;(或&lt;&gt;)ALL</td><td>不等于子查询结果中的任何值</td><td>NOT IN</td></tr></tbody></table><p>eg. 在Student表中，查询不是CS专业的学生中，比CS专业任意一个学生年纪小的学生姓名和年龄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname, Sage<br><span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">WHERE</span> Sage<span class="hljs-operator">&lt;</span><span class="hljs-keyword">ANY</span><br> (<span class="hljs-keyword">SELECT</span> Sage <span class="hljs-keyword">FROM</span> Student<br>  <span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span>)<br>  <span class="hljs-keyword">AND</span> Sdept <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;CS&#x27;</span>； <span class="hljs-operator">/</span><span class="hljs-operator">/</span>注意这是父查询块中的条件<br></code></pre></td></tr></table></figure><h3 id="EXISTS-子查询"><a href="#EXISTS-子查询" class="headerlink" title="EXISTS-子查询"></a><mark>EXISTS-子查询</mark></h3><p>EXISTS 代表存在量词（与之对应的为NOT EXISTS）</p><p>EXISTS 谓词的子查询不返回任何数据，只产生逻辑真值’true’或逻辑假值’false”逻辑蕴涵表达：</p><h2 id="【集合查询】"><a href="#【集合查询】" class="headerlink" title="【集合查询】"></a>【集合查询】</h2><p>多个SELECT语句的结果可以进行集合的并（UNION）、交（INTERSECT）、差（EXCEPT）操作</p><p><strong>注意：</strong>参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同</p><p><strong>SELECT 语句 1 UNION&#x2F;INTERSECT&#x2F;EXCEPT SELECT 语句 2</strong></p><h3 id="UNION-并操作"><a href="#UNION-并操作" class="headerlink" title="UNION 并操作"></a><mark>UNION 并操作</mark></h3><p>UNION 合并查询结果时，系统会自动去掉重复元组，若需保留，则采用UNION ALL</p><p>eg1. 在Student 表中查询CS专业的学生和年龄不大于19岁的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> <br>Student <br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span> <span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student <br>WEHRE Sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>;<br></code></pre></td></tr></table></figure><p>eg2. 在SC表中查询选修了课程1或者课程2的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br>WEHRE Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>; <br></code></pre></td></tr></table></figure><h3 id="INTERSECT-交操作"><a href="#INTERSECT-交操作" class="headerlink" title="INTERSECT 交操作"></a><mark>INTERSECT 交操作</mark></h3><p>eg.查询既选修了课程1又选修了课程2的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SCWHERE Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <br><span class="hljs-keyword">INTERSECT</span><br><span class="hljs-keyword">SELECT</span> Sno<br><span class="hljs-keyword">FROM</span> SC<br>WEHRE Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="EXCEPT-差操作"><a href="#EXCEPT-差操作" class="headerlink" title="EXCEPT 差操作"></a><mark>EXCEPT 差操作</mark></h3><p>eg.查询CS专业的学生与年龄不大于19岁的学生的差集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> Sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span> <span class="hljs-keyword">EXCEPT</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> Student WEHRE Sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>;<br></code></pre></td></tr></table></figure><h2 id="【基于派生表的查询】"><a href="#【基于派生表的查询】" class="headerlink" title="【基于派生表的查询】"></a>【基于派生表的查询】</h2><p>子查询出现在FROM子句时，子查询将生成临时的派生表，成为主查询的查询对象。</p><p><strong>FROM （子查询） AS别名（属性列名1，属性列名n）；</strong></p><p>&#x2F;&#x2F;如果子查询中没有聚集函数，派生表可以不指定属性列，子查询SELECT 子句后面的列名为其默认属性</p><p>&#x2F;&#x2F;AS 可以省略，但必须为派生表关系指定一个别名；</p><p>eg1.找出每个学生超过他自己选修课程平均成绩的课程号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno, Cno<br><span class="hljs-keyword">FROM</span> SC, (<span class="hljs-keyword">SELECT</span> Sno, <span class="hljs-built_in">Avg</span>(Grade) <br><span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno) <span class="hljs-keyword">AS</span> Avg_sc(avg_sno, avg_grade) <br><span class="hljs-keyword">WHERE</span> SC.Sno <span class="hljs-operator">=</span> Avg_sc.avg_sno <span class="hljs-keyword">AND</span> SC.Grade<span class="hljs-operator">&gt;=</span>Avg_sc.avg_grade;<br></code></pre></td></tr></table></figure><p>eg2.查询所有选修了1号课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname<br><span class="hljs-keyword">FROM</span> Student, (SECLECT Sno <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">AS</span> SC1 <br><span class="hljs-keyword">WHERE</span> Student.Sno<span class="hljs-operator">=</span>SC1.Sno；<br></code></pre></td></tr></table></figure><h1 id="INSERT-x2F-UPDATE-x2F-DELETE-语句"><a href="#INSERT-x2F-UPDATE-x2F-DELETE-语句" class="headerlink" title="INSERT&#x2F;UPDATE&#x2F;DELETE 语句"></a><font color='red'>INSERT&#x2F;UPDATE&#x2F;DELETE 语句</font></h1><h2 id="插入数据INSERT"><a href="#插入数据INSERT" class="headerlink" title="插入数据INSERT "></a><mark>插入数据INSERT </mark></h2><h3 id="1-插入元组"><a href="#1-插入元组" class="headerlink" title="(1)插入元组"></a>(1)插入元组</h3><p><strong>INSERT</strong> <strong>INTO 表名(列名1,列名n)</strong></p><p><strong>VALUES （常量1，常量n）; &#x2F;&#x2F;字符串常量要用单引号（’）括起来</strong></p><p>假设现有TAB1表，共有C1到C4四列，其中C4列是字符串常量</p><h4 id="situation1-明确给出新增元组要在哪些属性上赋值（插入数据包含全部属性列）"><a href="#situation1-明确给出新增元组要在哪些属性上赋值（插入数据包含全部属性列）" class="headerlink" title="situation1. 明确给出新增元组要在哪些属性上赋值（插入数据包含全部属性列）"></a>situation1. 明确给出新增元组要在哪些属性上赋值（插入数据包含全部属性列）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> TAB1 (C1, C2, C3, C4) <br><span class="hljs-keyword">VALUES</span> （<span class="hljs-number">1</span>， <span class="hljs-number">2</span>， <span class="hljs-number">3</span>， <span class="hljs-string">&#x27;4&#x27;</span>）；<br></code></pre></td></tr></table></figure><h4 id="situation2-仅指出在TAB1-表上插入元组（插入数据包含全部属性列）"><a href="#situation2-仅指出在TAB1-表上插入元组（插入数据包含全部属性列）" class="headerlink" title="situation2.仅指出在TAB1 表上插入元组（插入数据包含全部属性列）"></a>situation2.仅指出在TAB1 表上插入元组（插入数据包含全部属性列）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> TAB1<br><span class="hljs-keyword">VALUES</span> （<span class="hljs-number">1</span>， <span class="hljs-number">2</span>， <span class="hljs-number">3</span>， <span class="hljs-string">&#x27;4&#x27;</span>）； <span class="hljs-operator">/</span><span class="hljs-operator">/</span>这种情况表示要在TAB1 表全部各列赋值，且插入数据的顺序必须和列的顺序对应<br></code></pre></td></tr></table></figure><h4 id="situation3-明确给出新增元组要在哪些属性列上赋值（插入数据不包含全部属性列）"><a href="#situation3-明确给出新增元组要在哪些属性列上赋值（插入数据不包含全部属性列）" class="headerlink" title="situation3. 明确给出新增元组要在哪些属性列上赋值（插入数据不包含全部属性列）"></a>situation3. 明确给出新增元组要在哪些属性列上赋值（插入数据不包含全部属性列）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> TAB1 (C1, C2, C3)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-operator">/</span><span class="hljs-operator">/</span>这种情况下, C4 列会被赋为<span class="hljs-keyword">NULL</span> 注意：当表定义说明了<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> 时，不赋值会出错<br></code></pre></td></tr></table></figure><h4 id="situation4-仅指出在TAB1-表上插入元组（插入数据不包含全部属性列）"><a href="#situation4-仅指出在TAB1-表上插入元组（插入数据不包含全部属性列）" class="headerlink" title="situation4. 仅指出在TAB1 表上插入元组（插入数据不包含全部属性列）"></a>situation4. 仅指出在TAB1 表上插入元组（插入数据不包含全部属性列）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> TAB1<br><span class="hljs-keyword">VALUES</span> （<span class="hljs-number">1</span>， <span class="hljs-number">2</span>， <span class="hljs-number">3</span>， <span class="hljs-keyword">NULL</span>）； <span class="hljs-operator">/</span><span class="hljs-operator">/</span>这种情况必须明确给出未赋值的属性列为<span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><h3 id="（2）插入子查询结果"><a href="#（2）插入子查询结果" class="headerlink" title="（2）插入子查询结果"></a>（2）插入子查询结果</h3><p><strong>INSERT</strong></p><p><strong>INTO 表名(属性列1,属性列n)</strong></p><p><strong>子查询；&#x2F;&#x2F;子查询嵌套在INSERT语句中生成要插入的批量数据</strong></p><p>eg.假设现有TAB1表（如上），并按C1列分组求C2列的平均值，并存入TAB2表（其中TAB2 表的C1列存放C1， avg_C2 列存放 C2 列的均值）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> TAB2 (C1, avg_C2)<br> <span class="hljs-keyword">SELECT</span> C1, <span class="hljs-built_in">AVG</span>(C2) <br><span class="hljs-keyword">FROM</span> TAB1<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> C1;<br></code></pre></td></tr></table></figure><h2 id="修改数据-UPDATE"><a href="#修改数据-UPDATE" class="headerlink" title="修改数据 UPDATE"></a><mark>修改数据 UPDATE</mark></h2><p><strong>UPDATE 表名</strong></p><p><strong>SET 列名1&#x3D;表达式1，列名n&#x3D;表达式n</strong></p><p><strong>WHERE 条件；&#x2F;&#x2F;修改指定表中满足WHERE 子句条件的元组；若省略WHERE，表示要修改表中的所有元组</strong></p><h4 id="situation1-修改某一个元组的值"><a href="#situation1-修改某一个元组的值" class="headerlink" title="situation1. 修改某一个元组的值"></a>situation1. 修改某一个元组的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> TAB1 <span class="hljs-keyword">SET</span> C4<span class="hljs-operator">=</span><span class="hljs-string">&#x27;O&#x27;</span><span class="hljs-keyword">WHERE</span> C1<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="situation2-修改多个元组的值-UPDATE-TAB1"><a href="#situation2-修改多个元组的值-UPDATE-TAB1" class="headerlink" title="situation2. 修改多个元组的值 UPDATE TAB1"></a>situation2. 修改多个元组的值 UPDATE TAB1</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> C3<span class="hljs-operator">=</span>C3<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="situation3-带子查询的修改语句-UPDATE-TAB1"><a href="#situation3-带子查询的修改语句-UPDATE-TAB1" class="headerlink" title="situation3. 带子查询的修改语句 UPDATE TAB1"></a>situation3. 带子查询的修改语句 UPDATE TAB1</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> C4<span class="hljs-operator">=</span><span class="hljs-string">&#x27;O&#x27;</span><span class="hljs-keyword">WHERE</span> C1 <span class="hljs-keyword">IN</span><br>（<span class="hljs-keyword">SELECT</span> C1FROM TAB2<br><span class="hljs-keyword">WHERE</span> avg_C2<span class="hljs-operator">=</span><span class="hljs-number">2</span>; <br></code></pre></td></tr></table></figure><h2 id="删除数据DELETE"><a href="#删除数据DELETE" class="headerlink" title="删除数据DELETE"></a><mark>删除数据DELETE</mark></h2><p>DELETE</p><p>FROM 表名</p><p>WHERE条件;     &#x2F;&#x2F;删除指定表中满足WHERE子句条件的元组；若省略WHERE，表示要删除表中的所有元组注意：DELETE 语句删除的是表中的数据，并不是表的定义，表的定义仍在数据字典当中</p><h4 id="situation1-删除某一个元组的值DELETE"><a href="#situation1-删除某一个元组的值DELETE" class="headerlink" title="situation1. 删除某一个元组的值DELETE"></a>situation1. 删除某一个元组的值DELETE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FROM</span> TAB1WHERE C1<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="situation2-删除多个元组的值-DELETE"><a href="#situation2-删除多个元组的值-DELETE" class="headerlink" title="situation2. 删除多个元组的值 DELETE"></a>situation2. 删除多个元组的值 DELETE</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FROM</span> TAB1; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>TAB1 将变成空表<br></code></pre></td></tr></table></figure><h4 id="situation3-带子查询的删除语句"><a href="#situation3-带子查询的删除语句" class="headerlink" title="situation3. 带子查询的删除语句"></a>situation3. 带子查询的删除语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> TAB1 <br><span class="hljs-keyword">WHERE</span> C1 <span class="hljs-keyword">IN</span> <br>(<span class="hljs-keyword">SELECT</span> C1 <br><span class="hljs-keyword">FROM</span> TAB2 <br><span class="hljs-keyword">WHERE</span> avg_C2<span class="hljs-operator">=</span><span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h1 id="VIEW-视图"><a href="#VIEW-视图" class="headerlink" title="VIEW 视图"></a><font color='red'>VIEW 视图</font></h1><h2 id="定义视图CREATE-VIEW"><a href="#定义视图CREATE-VIEW" class="headerlink" title="定义视图CREATE VIEW"></a><mark>定义视图CREATE VIEW</mark></h2><p><strong>CREATE VIEW 视图名（列名1，列名n） &#x2F;&#x2F;若省略列名，则该视图由子查询中SELECT的目标列字段组成</strong></p><p><strong>AS 子查询</strong></p><p><strong>WITH CHECK OPTION； &#x2F;&#x2F;若添加该句，则表示对视图进行增删改时要满足子查询中的条件表达式</strong></p><p>在以下情况中必须明确指定组成视图的列名：</p><p>1.某个目标列不是单纯的列名，而是聚集函数或列表达式</p><p>\2. 多表连接时选出了几个同名列作为视图的字段</p><p>3.需要在视图中为某个列启用新的更合适的名字</p><p>行列子集视图：由单个基本表导出，仅去掉了基本表的某些行和某些列，但保留了主码</p><p>若某些视图是建立在另一个表的全部属性列上的，即视图与基本表的各列是一一对应的。那么当修改基本表的结构时，基本表和视图的映像关系会被破坏。这种情况最好在修改基本表后删除该视图，然后重建该视图</p><p>eg1. 建立TAB1的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_TAB1 <br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> C1, C2, C3, C4<br><span class="hljs-keyword">FROM</span> TAB1<br><span class="hljs-keyword">WHERE</span> C1<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>eg2.建立C4为4时TAB1的视图，并保证以后每次增删改时都要满足C4为4的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_TAB2<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> C1, C2, C3, C4 <br><span class="hljs-keyword">FROM</span> TAB1<br><span class="hljs-keyword">WHERE</span> C4<span class="hljs-operator">=</span><span class="hljs-string">&#x27;4&#x27;</span> <br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION;<br></code></pre></td></tr></table></figure><p>eg3.建立在一个或多个已定义号的视图上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_TAB3<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> C1, C2, C3 <br><span class="hljs-keyword">FROM</span> V_TAB1 <br><span class="hljs-keyword">WHERE</span> C2<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>eg4.为减少冗余数据，定义基本表时一般只存放基本数据。当需要使用计算得出的派生数据时，可以设置在视图中的派生属性列上，也称为虚拟列。带虚拟列的视图也称为带表达式的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_TAB4(C1, new_C2)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> C1, <span class="hljs-number">10</span><span class="hljs-operator">+</span>C2 <br><span class="hljs-keyword">FROM</span> TAB1；<br></code></pre></td></tr></table></figure><p>eg5.分组视图:带有聚集函数和GROUP BY子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_TAB5(C1, avg_C2) <br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> C1, <span class="hljs-built_in">AVG</span>(C2)<br><span class="hljs-keyword">FROM</span> TAB1<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> C1; <br></code></pre></td></tr></table></figure><h2 id="删除视图DROP-VIEW"><a href="#删除视图DROP-VIEW" class="headerlink" title="删除视图DROP VIEW"></a><mark>删除视图DROP VIEW</mark></h2><p>DROP VIEW 视图名 CASCADE； &#x2F;&#x2F;若使用 CASCADE级联删除语句，则将把该视图导出的所有视图一并删除eg1.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> V_TAB2; <br></code></pre></td></tr></table></figure><p>eg2.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> V_TAB1 CASCADE； <span class="hljs-operator">/</span><span class="hljs-operator">/</span>由 V_TAB1 导出的 V_TAB3 也一并删除<br></code></pre></td></tr></table></figure><h2 id="查询视图和更新视图"><a href="#查询视图和更新视图" class="headerlink" title="查询视图和更新视图"></a><mark>查询视图和更新视图</mark></h2><p>视图定义后，对视图进行查询和更新的语句和语法与基本表相同</p><p>视图的查询与更新最终都会转换为对基本表的查询和更新，这一过程也被称为视图消解一般来说，行列子集视图的查询和更新都可以顺利转换，其他则不一定</p><h1 id="空值"><a href="#空值" class="headerlink" title="空值"></a><font color=red>空值</font></h1><h2 id="判断一个属性是否为空值"><a href="#判断一个属性是否为空值" class="headerlink" title="判断一个属性是否为空值"></a><mark>判断一个属性是否为空值</mark></h2><p>属性 IS NULL</p><p>属性 IS NOT NULL</p><h2 id="空值的运算"><a href="#空值的运算" class="headerlink" title="空值的运算"></a><mark>空值的运算</mark></h2><p>空值与另一个值的算术运算结果为空值</p><p>空值与另一个值的比较运算结果为UNKNOWN</p><p>在查询语句中，只有使WHERE和HAVING 子句的选择条件为TRUE 的元组才会被选出作为输出结果（即不包括UNKNOWN 的情况）</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试准备第一天-常见问题准备</title>
    <link href="/2022/07/01/09%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/"/>
    <url>/2022/07/01/09%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h2 id="第一部分：无领导面试（这部分是自己写的答案，可能不对，只提供参考）"><a href="#第一部分：无领导面试（这部分是自己写的答案，可能不对，只提供参考）" class="headerlink" title="第一部分：无领导面试（这部分是自己写的答案，可能不对，只提供参考）"></a>第一部分：无领导面试（这部分是自己写的答案，可能不对，只提供参考）</h2><h3 id="1-如何预防金融风险？"><a href="#1-如何预防金融风险？" class="headerlink" title="1.如何预防金融风险？"></a>1.如何预防金融风险？</h3><ul><li>进一步健全金融风险预警体系</li><li>加大金融基础设施的建设力度</li><li>推动金融市场基础制度的建设和完善</li><li>充分发挥监管机制的作用</li><li>做好重点领域的金融风险防控工作</li></ul><h3 id="2-某农产品公司面对资金短缺问题，现只有20万元资金可供使用，需解决以下问题："><a href="#2-某农产品公司面对资金短缺问题，现只有20万元资金可供使用，需解决以下问题：" class="headerlink" title="2.某农产品公司面对资金短缺问题，现只有20万元资金可供使用，需解决以下问题："></a>2.某农产品公司面对资金短缺问题，现只有20万元资金可供使用，需解决以下问题：</h3><ul><li>1.因工作导致工伤员工的医药费</li><li>2.工作大楼及办公室的装修及修缮</li><li>3.员工上个季度的业绩奖励</li><li>4.即将到来的节日员工福利</li><li>5.员工的日常出行交通补贴</li></ul><p>讨论：如果你是相关人员请问如何排列事项优先级，以及如何分配资金。<br>答：员工的生命安全第一位，所以首先是医药费，按照相关法律法规基于赔偿；然后是填补之前的空缺，上个季度的业绩奖励，按照员工业绩成绩进行合理发放，然后是员工入场的雏形交通部图二和即将到来节日的福利，最后剩下的钱评估是都足够装修，如果够了就进行施工，不够继续等待下一笔资金的到来。</p><h3 id="3-对金融风险进行排序，一共9个金融风险：信用风险、监管风险、法律风险、操作风险、技术性风险、市场风险、信息泄露风险、支付风险、结算风险。"><a href="#3-对金融风险进行排序，一共9个金融风险：信用风险、监管风险、法律风险、操作风险、技术性风险、市场风险、信息泄露风险、支付风险、结算风险。" class="headerlink" title="3.对金融风险进行排序，一共9个金融风险：信用风险、监管风险、法律风险、操作风险、技术性风险、市场风险、信息泄露风险、支付风险、结算风险。"></a>3.对金融风险进行排序，一共9个金融风险：信用风险、监管风险、法律风险、操作风险、技术性风险、市场风险、信息泄露风险、支付风险、结算风险。</h3><ul><li>依据风险性规则对上述金融风险进行排序。</li><li>找出最重要的风险，并提出三点降低风险的建议。</li></ul><p>答：九类风险有些多，我感觉可以先进性大致的一个归类，技术性风险、信息泄露风险、支付风险、结算风险这些归为技术类风险，现在就剩下：信用、监管、法律、操作、市场、技术类。再把监管和法律归为一类。现在就有这样一个递进关系，监管法律不严格，操作就会失误，出现技术性风险，出现技术性风险（比如隐私泄露）就会造成信用低下，进而影响市场，所以解决问题的源头在法律和监管，按照这个逻辑顺序进行一次排序就是重要程度，因为我们进行风险排序的目的是解决问题、降低风险，就要从源头出发。<br>对于法律监管风险，建议有：首先完善公司规章制度，培训员工的法律意识；然后健全监管体制，可以设置举报信箱或者举报奖励制度。</p><h2 id="第二部分：半结构化面试（这部分有些在网上找的，自己补充完善）"><a href="#第二部分：半结构化面试（这部分有些在网上找的，自己补充完善）" class="headerlink" title="第二部分：半结构化面试（这部分有些在网上找的，自己补充完善）"></a>第二部分：半结构化面试（这部分有些在网上找的，自己补充完善）</h2><h3 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1.自我介绍"></a>1.自我介绍</h3><ul><li>各位面试官大家好，很荣幸能参加此次的面试。我叫*<em><strong>，山西</strong></em>人，今年毕业于太原理工大学、数据科学与大数据技术专业，考取到西安电子科技大学的研究生，预计九月份开学。</li><li>我在校期间学习成绩良好，绩点排名在全专业前30%，通过了四六级考试，利用课余时间以及寒暑假参加了一系列科技竞赛与创新创业的竞赛，获得了优秀的成绩，包括挑战杯的全国银奖、互联网+的山西省金奖以及建模竞赛的山西省一等奖，这个竞赛的选题是当年的C题，也是关于银行贷款风险评估的。除了这些竞赛，也获得了一些在校的荣誉，比如校级的优秀共青团员、担任班长获得了优秀班干部的荣誉称号、疫情期间参加志愿活动获得了志愿服务奖学金，由于综合表现优异，毕业时获得了优秀毕业生的荣誉称号。</li><li>在大学期间主要学了C语言、python、数据分析挖掘、数据库、机器学习、深度学习的一些内容。</li><li>我是一个开朗热情的人，喜欢结交朋友、喜欢跑步、打羽毛球，平时也喜欢写一些东西，我大学期间做过微信公众号，然后毕业的这段时间搭建了自己的博客，分享学习到的东西。</li><li>这就是我的主要情况，我的自我介绍完毕，谢谢各位面试官。</li></ul><h3 id="2-你学了那些技术，对本岗位有所帮助"><a href="#2-你学了那些技术，对本岗位有所帮助" class="headerlink" title="2.你学了那些技术，对本岗位有所帮助"></a>2.你学了那些技术，对本岗位有所帮助</h3><ul><li>首先我学过数据库，可以对银行的一些客户数据、金融数据进行保管与相关操作</li><li>然后我学数据挖掘，可以根据用户信息对潜在用户进性挖掘预测，也可以分析用户的贷款风险</li><li>然后我还学过人工智能方面的知识，比如可以尝试着去做客服机器人，智能应答这种。</li><li>最后呢，我还会一些django和前端，可以搭建宣传网站之类的。</li></ul><h3 id="3-对建行的认识与理解"><a href="#3-对建行的认识与理解" class="headerlink" title="3.对建行的认识与理解"></a>3.对建行的认识与理解</h3><ul><li>中国建设银行，前身为成立于1954年10月1日的中国人民建设银行（后于1996年3月26日正式更名为中国建设银行），是中央管理的国有大型商业银行。主要经营领域包括公司银行业务、个人银行业务和资金业务。在境内有38家分行，在境外29个国家和地区设有分支机构及子公司，拥有基金、租赁、信托、人寿、财险、投行、期货、养老金等多个行业的子公司。</li></ul><h3 id="4-为什么想来银行工作"><a href="#4-为什么想来银行工作" class="headerlink" title="4.为什么想来银行工作"></a>4.为什么想来银行工作</h3><ul><li>首先银行这个岗位与自己所学的专业是比较契合的。</li><li>然后我认为银行能够为自己提供一个稳定的职业发展环境，这样就能够一心一意地把全部精力和注意力放在提升个人业务水平上，能够更快地得到持续性地成长，且有机会在一个领域内深耕。</li></ul><h3 id="5-谈谈你的缺点"><a href="#5-谈谈你的缺点" class="headerlink" title="5.谈谈你的缺点"></a>5.谈谈你的缺点</h3><ul><li>我的公开演讲能力比较差，在公共场合讲话的时候我会感到紧张，不过谈论我熟悉的领域我会比较放松。所以当我需要做公开发言的时候， 我必须要准备得很充分。我确实羡慕那些无论什么话题都能够高谈阔论的人。</li><li>还有一点就是自己独立思考的能力还比较弱，有时候会受别人的一些干扰，改变自己的思路，但时候往往发现自己是对的。所以说现在也在读一些书籍，慢慢的去改变这个毛病。</li></ul><h3 id="6-在学校做过什么实践活动"><a href="#6-在学校做过什么实践活动" class="headerlink" title="6.在学校做过什么实践活动"></a>6.在学校做过什么实践活动</h3><ul><li>首先，我在学校是单人的班长，管理班级事务，配合学院组织一些活动</li><li>然后我主要参加了一些竞赛，刚刚自我介绍也说过，这里不再赘述</li><li>我还参加一些志愿服务活动</li><li>有个遗憾的是没有参加学校的三下乡的活动，然后看见建行会组织类似活动，所以挺动心的。</li></ul><h3 id="7-金融科技的理解"><a href="#7-金融科技的理解" class="headerlink" title="7.金融科技的理解"></a>7.金融科技的理解</h3><ul><li>金融科技英译为Fintech， 是 Financial Technology 的缩写，是基于大数据、云计算、人工智能、区块链等一系列技术创新，全面应用于支付清算、借贷融资、财富管理、零售银行、保险、交易结算等六大金融领域，是金融业未来的主流趋势。能够提高效率、降低运营的成本。</li></ul><h3 id="8-印象深刻的事情"><a href="#8-印象深刻的事情" class="headerlink" title="8.印象深刻的事情"></a>8.印象深刻的事情</h3><ul><li>考研这段经历让我印象深刻，他不像在高中一样，有一起努力的伙伴、有监督的老师。真的就是孤军奋战，需要自己给自己做规划、自己监督自己、在这段时间，一直都很自律，也顺利的考上了心仪的学校，所以印象还是很深刻的。</li></ul><h3 id="9-对大数据的看法"><a href="#9-对大数据的看法" class="headerlink" title="9.对大数据的看法"></a>9.对大数据的看法</h3><ul><li>我感觉大数据是人类社会发展的大趋势，最早的提出者麦肯锡，大数据并非是想象上简单的对海量数据进行整理、收集，它的实质是通过收集、整理海量数据，利用布式运算，对个人、群体或行业领域的未来发展进行合理的精准的预测。大数据的四性：大规模性(Volume)、高速性(Velocity)、多样性(Variety)、价值性(Value)</li></ul><h3 id="10-生活中遇到烦恼和压力的时候如何排解？"><a href="#10-生活中遇到烦恼和压力的时候如何排解？" class="headerlink" title="10.生活中遇到烦恼和压力的时候如何排解？"></a>10.生活中遇到烦恼和压力的时候如何排解？</h3><ul><li>首先，我再大学期间结交了几个很要好的朋友，我压力大的时候会找他们倾诉，然后听听他们作为旁观者的意见。</li><li>然后我会去跑步，释放自己的压力</li></ul><h3 id="11-来我们银行可以做什么？"><a href="#11-来我们银行可以做什么？" class="headerlink" title="11.来我们银行可以做什么？"></a>11.来我们银行可以做什么？</h3><ul><li>答：通过我的研究领域可以在银行做金融科技相关工作，例如通过AI技术研发智能投资顾问与聊天机器人、股票价格预测、评估消费者行为和支付意愿、信用评分、保险业的承保与理赔、风险管理与压力测试、金融监管与识别监测等金融领域的问题；第二点还可以通过大数据金融利用互联网技术和信息通信技术，探索资金融通、支付、投资和信息中介的新型金融业务模式的研发。并通过数据分析与可视化来展示相应的分析结果。</li></ul>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA学习2：相关软件安装</title>
    <link href="/2022/06/30/08FPGA%E5%AD%A6%E4%B9%A02%EF%BC%9A%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2022/06/30/08FPGA%E5%AD%A6%E4%B9%A02%EF%BC%9A%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前前后后耗时三天，终于将用到的quartus、器件库、modelsim软件下载、破解、关联配置做好了。一路上碰到了各种奇奇怪怪的问题，有一点点地查找解决方案，现在把踩过的坑，以及找好的安装包分享到这里，便于自己以后使用，也给大家提供便捷。</p><p>首先要清楚quartus和modelsim分别是干什么的，Quartus是开发软件，可以进行项目开发、Verilog代码的编写等，就像是写Python所使用的pycharm；Modelsim是仿真软件，仿真顾名思义，就是将实际的工作电路模拟出来，可以方便查看输出等结果是否正确。</p><p>主要参考的教程是野火出品的这个视频，它的网址如下，但是其中没有具体说明软件的下载地址与破解方法，会遇到的常见问题也没有进行说明。<a href="https://www.bilibili.com/video/BV17z411i7er?p=3&vd_source=efae70b1a755d9c960b4d6e78ad98612">【野火】FPGA系列教学视频，真正的手把手教学，“波形图”教学法，现场画波形图写代码，硬件基于野火FPGA EP4CE10征途系列开发板，已完结_哔哩哔哩_bilibili</a></p><h2 id="一、quartus下载与破解"><a href="#一、quartus下载与破解" class="headerlink" title="一、quartus下载与破解"></a>一、quartus下载与破解</h2><p>quartus的下载地址为：<a href="https://www.jb51.net/softs/545630.html">quartus ii 13.0破解版下载 quartus ii(PLD&#x2F;FPGA开发软件) 13.0 免费特别版(附注册机) 下载-脚本之家 (jb51.net)</a></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750805365-ed2965b0-85ea-47ad-8d48-85f64d893940.png#clientId=u36f59fbd-45b1-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=265&id=u67050f86&name=image.png&originHeight=348&originWidth=924&originalType=binary&ratio=1&rotation=0&showTitle=false&size=236290&status=done&style=none&taskId=ud108ce28-16ee-4e54-9fc1-ebd0a4037d3&title=&width=704" alt="image.png"></p><p>在这个网盘中下载下来之后会带有破解器，该网页也有破解的具体操作，这里不做过多的讲解，这一步遇到的坑:</p><ol><li>一定要将该软件安装在全英文路径，如果有中文路径的话会出现软件打不开的情况。</li><li>破解的原理可能与电脑的网卡有关，在电脑有多个网卡或者有虚拟网卡时会有多个NIC(ID)，这时候复制第一个就可以。</li></ol><p>破解完如何查看是否破解成功：</p><ol><li>在进入软件的时候，没有出现相关提醒</li><li>在license setup中可以看到到期的日期为2035年 ![]<img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750820639-1a16af20-4cae-44d7-89ad-875b971a0ad2.png#clientId=u36f59fbd-45b1-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=625&id=ud16718a9&name=image.png&originHeight=820&originWidth=846&originalType=binary&ratio=1&rotation=0&showTitle=false&size=228128&status=done&style=none&taskId=u90bddced-ff94-4a07-87a7-9bdd1062b80&title=&width=644.5714285714286" alt="image.png"></li></ol><h2 id="二、quartus器件库的下载"><a href="#二、quartus器件库的下载" class="headerlink" title="二、quartus器件库的下载"></a>二、quartus器件库的下载</h2><p>器件库的安装可以参考这篇文章：<a href="https://blog.csdn.net/sou_nuo/article/details/117092405">Quartus II 13.0 添加器件库教程(包含下载地址)_阿聍的博客-CSDN博客_quartus器件库下载</a></p><p>但是一定要注意，不能用里面提供下载的器件库，因为器件库的版本必须与quartus完全一致，这里我就踩过坑，虽然版本都是13.0，但在这后面还有几位是不一致的，所以在网上找了很久才下载下来合适的器件库版本，下载地址如下：</p><p>链接：<a href="https://pan.baidu.com/s/1yIKSO0cfoZ0eYESn3lhv-g">https://pan.baidu.com/s/1yIKSO0cfoZ0eYESn3lhv-g</a>   提取码：ucm3</p><p>还有一点可能遇到的问题，就是教程里安装器件库的程序是从这个地方打开的</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750840330-c6d69089-fb41-4e26-8268-fbc5ac19a5ca.png#clientId=u36f59fbd-45b1-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=624&id=uc06c5fab&name=image.png&originHeight=819&originWidth=444&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206242&status=done&style=none&taskId=u3975d07d-0c8e-4817-9724-f1fecb190ca&title=&width=338.2857142857143" alt="image.png"></p><h2 id="三、modelsim的下载与破解"><a href="#三、modelsim的下载与破解" class="headerlink" title="三、modelsim的下载与破解"></a>三、modelsim的下载与破解</h2><p>modelsim的下载地址如下：[modelsim se 10.5破解版下载_HDL语言仿真软件 v2020.5<a href="https://www.xiazai99.com/down/soft159256.html">网盘资源] - 99下载站 (xiazai99.com)</a></p><p>同样，在这个文章中也说明了破解的方法，但是如果按其操作，会出现各种错误，这部分错误的解决也是我花费时间最多的地方。</p><ol><li>在安装modelsim的过程中，不要一直选择是或者next，在其中有一步让选择是否安装相关驱动，一定要选择否，不然电脑就会蓝屏。这是血的教训。</li><li>如果按照教程的破解方法处理完毕，还是没有成功，很可能还是网卡有多个原因，这时可以直接将电脑的WiFi关掉，在进行破解</li><li>破解之后首次打开要使用管理员身份。</li></ol><h2 id="四、quartus与modelsim相关联"><a href="#四、quartus与modelsim相关联" class="headerlink" title="四、quartus与modelsim相关联"></a>四、quartus与modelsim相关联</h2><p>这一操作在引言部分的野火教程中有，但是按其操作还是会出现问题（但首先还是得先按着里面的操作一遍）。</p><ol><li><p>这个教程里跳过了新建项目，编写Verilog代码的步骤，直接进行仿真测试，我们没有相关程序的话是没发测试的，所以也要先建项目，写代码，这里看可以参考这个文章:<a href="https://blog.csdn.net/qq_37424623/article/details/123207484">Quartus软件创建第一个工程_驽马同学的博客-CSDN博客_quartus 创建工程</a>。但是这里面的代码又只展示了一半，还是图片，作为新手，完全不懂，无法操作，所以找了一段简单的代码，替换掉这篇文章中的Verilog进行测试，代码如下：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs markdown">`timescale  1ns/1ns<br>///////////////////////////////////////////////////////////////////////////<br>// Author        : EmbedFire<br>// Create Date   : 2019/03/12<br>// Module Name   : led<br>// Project Name  : led<br>// Target Devices: Altera EP4CE10F17C8N<br>// Tool Versions : Quartus 13.0<br>// Description   : 按键控制LED灯<br>//<br>// Revision      : V1.0<br>// Additional Comments:<br>// <br>// 实验平台: 野火<span class="hljs-emphasis">_征途Pro_</span>FPGA开发板<br>// 公司    : http://www.embedfire.com<br>// 论坛    : http://www.firebbs.cn<br>// 淘宝    : https://fire-stm32.taobao.com<br>//////////////////////////////////////////////////////////////////////////<br><br><br>module  myled<br>(<br><span class="hljs-code">    input   wire    key_in  ,   //输入按键</span><br><span class="hljs-code"></span><br><br><span class="hljs-code">    output  wire    led_out     //输出控制led灯</span><br><span class="hljs-code">);</span><br><span class="hljs-code"></span><br><br>//<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>//<br>//<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">* Main Code <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>//</span><br><span class="hljs-emphasis">//<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>//</span><br><span class="hljs-emphasis">//led_out:led灯输出的结果为key_in按键的输入值</span><br><span class="hljs-emphasis">assign  led_out = key_in;</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">endmodule</span><br></code></pre></td></tr></table></figure></li><li><p>在替换了上面的代码之后，新的问题出现，quartus无法分析成功，因为命名的问题，因为代码中主程序名还有文件名、以及项目名有一定的关系，把它们几个全设置为myled就可以成功。</p></li><li><p>在分析成功之后，点击仿真，按理说就应该打开modelsim软件了，但是可能并没有打开，而是报错，这是有可能是没有把默认的仿真软件设置为modelsim，在这里可以设置  <img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750851597-90d0c89a-e2af-495a-93ed-02395b5b7528.png#clientId=u36f59fbd-45b1-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=595&id=u253d0dbf&name=image.png&originHeight=781&originWidth=951&originalType=binary&ratio=1&rotation=0&showTitle=false&size=300364&status=done&style=none&taskId=ubd8eb30f-26b4-42bb-8632-c91e71bee8f&title=&width=724.5714285714286" alt="image.png"> </p></li><li><p>点击仿真后，modelsim的图标出现，却又再次提醒没有激活，但是单独打开modelsim是已经破解了正常打开的，这时有可能是quartus和modelsim两个破解过程中的使用的NIC(ID)不一样，把二者改为一样应该可以解决这个问题。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>磨刀不误砍柴工，学习FPGA之前，把这些必要的软件设置舒服是很重要的。之前在上学时也安装下载过许多的软件，这几个是遇到过流程最麻烦的，可能也是不熟悉的原因，花了几天时间，还是挺有成就感的，终于可以开始正式的学习了。</p>]]></content>
    
    
    <categories>
      
      <category>FPGA学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目申请书-书写经验总结</title>
    <link href="/2022/06/28/07%E9%A1%B9%E7%9B%AE%E7%94%B3%E8%AF%B7%E4%B9%A6-%E4%B9%A6%E5%86%99%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/28/07%E9%A1%B9%E7%9B%AE%E7%94%B3%E8%AF%B7%E4%B9%A6-%E4%B9%A6%E5%86%99%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近段时间在帮老师写项目申请书。第一次写，遇到了不少问题，在这里记录一下，写一点经验与心得，方便之后的再次书写。</p></blockquote><h2 id="一、内容板块"><a href="#一、内容板块" class="headerlink" title="一、内容板块"></a>一、内容板块</h2><p>本次的项目申请书的主题是芯片缺陷检测。按照研究所给出的书写模板，主要分为九个主要版块</p><ol><li><p>项目的基本信息</p></li><li><p>项目负责人及主要成员</p></li><li><p><strong>项目的基本情况</strong></p><p>项目的研究背景、研究目标、研究意义、国内外研究现状、本项目研究成果的重要性和应用前景</p></li><li><p><strong>主要研究内容和目标</strong></p><p>项目的研究内容、研究方案、技术路线、关键技术、创新点</p></li><li><p>项目负责人及团队信息</p></li><li><p>研究基础和团队代表性研究成果</p></li><li><p><strong>项目实施进度计划</strong></p></li><li><p>预期成果</p></li><li><p><strong>社会效益与风险评估</strong></p></li></ol><p>在这九个主要的板块之中加黑的部分，也就是：<strong>3.项目的基本情况、4.主要研究内容和目标、7.项目实施进度计划、9.社会效益与风险评估</strong> 是主要的内容。其他几个部分填的都是一些相关的信息，可能就是填写几个表格。因此主要介绍一下这几块内容一个写法。</p><h2 id="二、书写技巧"><a href="#二、书写技巧" class="headerlink" title="二、书写技巧"></a>二、书写技巧</h2><p>在写项目书之前，通常会得到一个叫做“指南”的东西，这个里面说清楚了对方希望解决的问题还有希望达到的预期效果，比如本项目的指南，就说明了，想要用深度学习算法去完成芯片的缺陷检测，且列举了希望解决芯片缺陷中的哪些基本类型，并指明了要求是准确度达到95%以上。</p><p>所以各个部分都是围绕这些来写，也就是说，指南中的话反复出现在各个版块，且不要害怕重复。</p><h2 id="三、重点部分"><a href="#三、重点部分" class="headerlink" title="三、重点部分"></a>三、重点部分</h2><h3 id="1-项目的基本情况"><a href="#1-项目的基本情况" class="headerlink" title="1.项目的基本情况"></a>1.项目的基本情况</h3><ul><li>研究背景及意义。（研究背景和意义经常放一块去说，所以就可以归为一个小标题）<ul><li>首先芯片是什么，它在哪些方面广泛应用，有什么重要性和必要性。然后说《国家相关战略支持》对该产业的支持；</li><li>然后引到芯片缺陷检测方面，说一下为什么要进行芯片缺陷检测，指明这项任务的意义；</li><li>现有的芯片检测方法有哪些缺陷与不足，如果不改变会有什么后果；</li><li>引出当今机器视觉技术和深度学习技术的当今发展趋势，这项技术有什么优点。一些国外大公司已经开始布局。</li><li>使用深度学习进行芯片检测的意义：对国家、对产业、对落实某项国家政策。</li></ul></li><li>研究目标<ul><li>先用一句话概述：针对什么问题、利用&#x2F;基于什么技术优势、开发什么东西。</li><li>然后围绕着指南中的内容。算法要能解决哪些问题、应该具备什么样的特性（比如鲁棒性、可进化等）、准确度要达到什么程度。</li><li>还要超出指南，提出一些新的东西，比如本文讲算法部署到智能硬件。</li></ul></li><li>国内外研究现状<ul><li>搜集在芯片缺陷检测领域的相关文章，最好对不同的方法进行分类与归纳</li><li>最后要“综上所述”，概括出现有技术的问题，强调本项目研究的先进性与合理性。</li><li>记得要把引用的文献也写上。</li></ul></li></ul><h3 id="2-重要性与应用前景"><a href="#2-重要性与应用前景" class="headerlink" title="2.重要性与应用前景"></a>2.重要性与应用前景</h3><ul><li>“没我不行”。芯片缺陷检测很重要但国内技术落后。如果继续利用传统方法造成什么后果</li><li>“有我更好”。说一下用到的技术，这些技术有什么优势，用了之后可以解决指南中的那些问题。</li><li>应用前景，先简单提及背景：芯片产业很大，芯片缺陷的质检环节比不可少，有很大的应用前景。</li></ul><h3 id="3-研究内容和目标"><a href="#3-研究内容和目标" class="headerlink" title="3.研究内容和目标"></a>3.研究内容和目标</h3><ul><li>研究内容<ul><li>围绕着“指南”，将要解决的问题或者说要做的事，分为几个层级。每一个层级就是一个研究内容，这几个研究内容之间既相互独立又一脉相承，可以通过一个示意图先画出来。需要注意的是，这里每个研究内容要起一个小标题，要专业且完整。</li><li>示意图：<img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750704814-fed50527-2312-444e-beef-d40a15a2f2f0.png#clientId=u241462fe-5d44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=378&id=u107e2a24&name=image.png&originHeight=496&originWidth=895&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162309&status=done&style=none&taskId=udf3cab9e-d911-455e-af02-4dfd973c2bb&title=&width=681.9047619047619" alt="image.png"></li><li>然后在示意图下面，每一个内容描述一段话，并不涉及到具体技术，就是简单论述研究什么内容，算是对示意图的一个展开。</li></ul></li><li>研究方案<ul><li>研究方案也不是具体的内容，首先也是画一张图，讲清楚研究的步骤，对于每个研究内容，先做什么、后做什么</li><li>示意图：<img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750731174-9e24b0c1-3aff-423b-8947-032d73e8e805.png#clientId=u241462fe-5d44-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=620&id=uba2bab38&name=image.png&originHeight=814&originWidth=627&originalType=binary&ratio=1&rotation=0&showTitle=false&size=188594&status=done&style=none&taskId=u05d96eba-fa3e-47da-b2d5-eb6c34fa515&title=&width=477.7142857142857" alt="image.png"></li><li>然后再用语句详细的描述步骤</li></ul></li><li>技术路线<ul><li>这里就需要写每一部分的详细技术了，比如对于数据集的准备，要对数据集的数量、专家标注、用到的图像处理技术展开写，以及展示具体的芯片缺陷图片。对于用到的算法，就需要将结构、公示等都写上。</li><li>还是可以根据研究内容去分点写。</li></ul></li><li>关键技术和创新点<ul><li>因为纯写创新内容并不好写，所以这里可以分为：拟解决的关键问题、主要创新点。</li><li>这里的主要创新点就不一定非要是创新，就可以对应的写 如何去解决那些关键问题，当然最好还是展示出创新。 比如你既觉得关键问题是：目标检测算法的优化。那么对应的创新点就是：针对微小芯片缺陷检测的检测算法优化。这里面不用写太多具体技术，那些公式、算法的大头还是放在技术路线里面。</li></ul></li></ul><h3 id="3-项目的实施进度"><a href="#3-项目的实施进度" class="headerlink" title="3.项目的实施进度"></a>3.项目的实施进度</h3><p>这一部分根据协商好的时间，将过程按照半年来分，把研究的内容分号，然后对于每一部分，再写一些具体研究的步骤就可以。</p><h3 id="4-社会效益与风险评估"><a href="#4-社会效益与风险评估" class="headerlink" title="4.社会效益与风险评估"></a>4.社会效益与风险评估</h3><ul><li>对于社会效益。主要就是项目实施之后对社会能起到的积极的作用。主要的方面有：促进经济发展、促进社会进步、带动就业、提高企业的产能与质量、提高人民生活水平之类的，就往里面套着写。</li><li>风险评估分为几个版块：技术风险、商业风险、管理风险，还有风险如何规避。对于风险，都要落脚在风险较小之上。<ul><li>技术风险。对于关键技术、本单位进行了深入理论研究、关键技术进行了大量实验、证明可行。本单位致力于研究什么、有资质。得出结论：基本无风险和不确定因素。</li><li>管理风险。本项目承担单位，——机构承担过多项国家级重点项目的管理与实施，具有很好的项目管理措施和经验，在管理上无风险。</li><li>商业风险。国产率上看，中国—–比重不断提升。中国—–国产化率提升，市场规模有较大的发展空间。因此，本项目的市场前景非常广阔。</li><li>规避风险的主要措施。对实验室和学校的情况进行介绍。对该行业之前有所涉及与研究。对关键技术进行了论证之类的。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章根据对几天书写项目书的经验进行了总结。主要展示了项目书分为那些版块，每个版块主要写些什么内容。虽然可能并不适用于各类项目申请书的书写，但是也算是有了一个大致了解，不至于上手后不知道要干什么、不知道要查找哪些</p>]]></content>
    
    
    <categories>
      
      <category>经验总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FocusNote快捷操作</title>
    <link href="/2022/06/28/06FocusNote%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/06/28/06FocusNote%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>现在写博客的顺序是：现在FocusNote（专注笔记）上写好，然后复制到typora上，之后再写到博客相应的markdown文档中。</p></blockquote><p>FocusNote是国产的笔记软件，界面很好看，书写也很方便，写一些复盘或者总结资料都在这个上面，在几年前也买下了永久版本。因此在这里简单记录一下常用的快捷方式，之后就不用经常跑官网去找了。</p><p><strong>段落相关：</strong></p><table><thead><tr><th align="center">标题</th><th align="center">Ctrl+alt+1&#x2F;2&#x2F;3</th></tr></thead><tbody><tr><td align="center">清除标题</td><td align="center">Ctrl+alt+0</td></tr><tr><td align="center">有序列表</td><td align="center">Ctrl+shift+i</td></tr><tr><td align="center">无序列表</td><td align="center">Ctrl+shift+u</td></tr><tr><td align="center">待办事宜</td><td align="center">Ctrl+shift+y</td></tr><tr><td align="center">引用</td><td align="center">Ctrl+shift+q</td></tr><tr><td align="center">代码块</td><td align="center">Ctrl+shift+c</td></tr><tr><td align="center">链接</td><td align="center">Ctrl+l</td></tr><tr><td align="center">公式</td><td align="center">Ctrl+alt+c</td></tr><tr><td align="center">附件</td><td align="center">Ctrl+alt+f</td></tr></tbody></table><p><strong>字体相关：</strong></p><table><thead><tr><th align="center">加粗</th><th align="center">Ctrl+b</th></tr></thead><tbody><tr><td align="center">斜体</td><td align="center">Ctrl+i</td></tr><tr><td align="center">下划线</td><td align="center">Ctrl+u</td></tr><tr><td align="center">中划线</td><td align="center">Ctrl+t</td></tr><tr><td align="center">高亮</td><td align="center">Ctrl+1&#x2F;2…&#x2F;9</td></tr><tr><td align="center">清除高亮</td><td align="center">Ctrl+0</td></tr></tbody></table><p><strong>页面相关：</strong></p><table><thead><tr><th align="center">查看页面信息</th><th align="center">alt+ctrl+l</th></tr></thead><tbody><tr><td align="center">打开大纲</td><td align="center">alt+ctrl+o</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>各类教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>专注笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA学习1：初始FPGA</title>
    <link href="/2022/06/20/05FPGA%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%88%9D%E5%A7%8BFPGA/"/>
    <url>/2022/06/20/05FPGA%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%88%9D%E5%A7%8BFPGA/</url>
    
    <content type="html"><![CDATA[<h2 id="1-FPGA是什么"><a href="#1-FPGA是什么" class="headerlink" title="1 FPGA是什么"></a>1 FPGA是什么</h2><p>​FPGA(Field Programmable Gate Array,简称FPGA)，<strong>现场可编程</strong>门阵列，一种以数字电路为主的集成芯片，属于可编程逻辑器件PLD（Programmable Logic Device)的一种。</p><h3 id="FPGA的分类"><a href="#FPGA的分类" class="headerlink" title="FPGA的分类"></a><strong>FPGA的分类</strong></h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750559990-9a0d9775-2cb6-4823-acf7-1c785e34566d.png#clientId=u194feb0d-a974-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=226&id=u3c63d900&name=image.png&originHeight=296&originWidth=660&originalType=binary&ratio=1&rotation=0&showTitle=false&size=166931&status=done&style=none&taskId=ubdb33b0e-c9c8-4bbb-9ac3-2576512a064&title=&width=502.85714285714283" alt="image.png"></p><h3 id="FPGA工作原理"><a href="#FPGA工作原理" class="headerlink" title="FPGA工作原理"></a><strong>FPGA工作原理</strong></h3><p>​FPGA是可以通过编程<strong>改变芯片内部电路结构</strong>，以此来满足不同硬件产品的应用需求。FPGA可编程跟软件编程有着本质的区别，对于CPU或者单片机的编程，往往是通过改变上面的寄存器的配置来实现的，但是并不会改变这个芯片的逻辑功能，但FPGA是确确实实把芯片内部的电路改变了，比如，上图分类中的第二种叫反熔丝技术，熔丝就是将电路烧断，而反熔丝就是将烧断的电路在连接起来。</p><p>​并不能通过软件编程，让一枚图形处理芯片编程为一枚通信芯片，FPGA则可以。FPGA的可编程性，叫硬件可编程。他让FPGA可以从逻辑门阵列进行编程，从而使FPGA可以在逻辑电路层面上改变。</p><p>​上面是比较直观的理解，接下来给出学术上的原理解释：</p><p>​FPGA采用了逻辑单元阵列LCA（Logic Cell Array）这样一个概念，内部包括可配置逻辑模块CLB（Configurable Logic Block）、输入输出模块IOB（Input Output Block）和内部连线（Interconnect）三个部分。 现场可编程门阵列（FPGA）是可编程器件，与传统逻辑电路和门阵列（如PAL，GAL及CPLD器件）相比，FPGA具有不同的结构。FPGA利用小型查找表（16×1RAM）来实现组合逻辑，每个查找表连接到一个D触发器的输入端，触发器再来驱动其他逻辑电路或驱动I&#x2F;O，由此构成了既可实现组合逻辑功能又可实现时序逻辑功能的基本逻辑单元模块，这些模块间利用金属连线互相连接或连接到I&#x2F;O模块。FPGA的逻辑是通过向内部静态存储单元加载编程数据来实现的，存储在存储器单元中的值决定了逻辑单元的逻辑功能以及各模块之间或模块与I&#x2F;O间的联接方式，并最终决定了FPGA所能实现的功能，FPGA允许无限次的编程。</p><h3 id="“现场可编程”特性"><a href="#“现场可编程”特性" class="headerlink" title="“现场可编程”特性"></a><strong>“现场可编程”特性</strong></h3><p>​FPGA可以在现场完成编程，而不需要把芯片拆下来，或是送回厂商来完成这个编程的操作，可通过远程或本地完成真正意义上的实时编程。</p><h2 id="2-FPGA的优势"><a href="#2-FPGA的优势" class="headerlink" title="2 FPGA的优势"></a><strong>2 FPGA的优势</strong></h2><p>​FPGA可以实现任意电路组合，我们可以把FPGA看成是一堆乐高，根据需要既可以组成非常简单的模型，也可以组合出非常复杂的模型。这就使得FPGA具备高度的灵活性。</p><p>​因为FPGA是通过逻辑电路来实现功能的，所以它的算力非常强，同时功耗非常低。因此很多人称它成为“芯片之王”。目前在很多行业被广泛使用。</p><p>总结，FPGA的优势：</p><p>1、编程灵活，开发周期短（可以替代ASIC）；</p><p>2、并发处理，速度非常快；</p><p>3、功耗低；</p><p>4、FPGA技术趋于成熟，成本已经和ASIC相当。</p><h2 id="3-FPGA的应用方向"><a href="#3-FPGA的应用方向" class="headerlink" title="3 FPGA的应用方向"></a>3 FPGA的应用方向</h2><ol><li>通信领域<ul><li>低延时 高效率</li><li>产品快速开发 各种协议的切换</li></ul></li><li>视频图像处理<ul><li>最高的实时性</li></ul></li><li>人工智能<ul><li>加速深度学习</li></ul></li><li>汽车驾驶<ul><li>低延时</li></ul></li></ol><h2 id="4-产业现状"><a href="#4-产业现状" class="headerlink" title="4 产业现状"></a>4 产业现状</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750535779-1b383c83-cacc-442b-9f2e-72a5980a474e.png#clientId=u194feb0d-a974-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=283&id=ue1421cac&name=image.png&originHeight=371&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=173730&status=done&style=none&taskId=u7bf320cc-af51-421a-bb3f-99c17b18693&title=&width=610.2857142857143" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750543785-19099077-2ce0-4263-a078-aca86ca6cc73.png#clientId=u194feb0d-a974-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=314&id=u6764d9f4&name=image.png&originHeight=412&originWidth=785&originalType=binary&ratio=1&rotation=0&showTitle=false&size=126887&status=done&style=none&taskId=u80e370b6-f687-4f17-9e25-3c632eefe7d&title=&width=598.0952380952381" alt="image.png"></p><p>​国外的赛灵思比较厉害，是巨头</p><p>​国内普遍性能落后一些</p>]]></content>
    
    
    <categories>
      
      <category>FPGA学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>FPGA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床搭建</title>
    <link href="/2022/06/17/04Markdown%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86--%E5%9B%BE%E5%BA%8A%E4%B8%8E%E8%BD%AC%E7%A0%81/"/>
    <url>/2022/06/17/04Markdown%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86--%E5%9B%BE%E5%BA%8A%E4%B8%8E%E8%BD%AC%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、图床"><a href="#一、图床" class="headerlink" title="一、图床"></a>一、图床</h2><h3 id="1-图床介绍"><a href="#1-图床介绍" class="headerlink" title="1 图床介绍"></a>1 图床介绍</h3><p>对于不写博客的伙伴，图床可能是一个陌生的词汇。从名字来看，应该和存储图片有关，但为什么要叫做“床”呢？</p><p>图床其实是互联网上进行图片存储的空间。因为博客往往是以markdown的形式发布，而markdown不同于平时编辑的word文档，它其中显示的图片并不是嵌入在文件中，而是引用外部的源。语法如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[]</span>(这里写图片在本服务器或本计算机的存储地址，或者网上图片的网址)<br></code></pre></td></tr></table></figure><p>这样以来，就会出现两个问题：</p><ol><li>如果是引用存储在本地的图片<ul><li>图片的路径不容易写对</li><li>如果误将本地的图片删除，那么博客中就会报错</li></ul></li><li>如果随便引用一个网上的图片<ul><li>这个图片可能随时会被作者删除或者其他原消失</li></ul></li></ol><p>在这种情况下，自己在网络上开辟一个安全可靠的网络空间就很重要。本文就记录一下图床的搭建与使用。</p><h3 id="2-图床搭建"><a href="#2-图床搭建" class="headerlink" title="2 图床搭建"></a>2 图床搭建</h3><p>github、Gitee、阿里云等都可以开辟空间上传图片，所以本身就具备了作为图床的能力，我们就可以利用这些免费的空间来搭建图床。然而每次手动上传操作时比较困难的，这是出现了一个图床的管理工具叫picgo，这是一个免费开源的工具。界面如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750310286-2f68bbb9-2ddf-46fb-a81d-5ba05476ea10.png#clientId=ufcc7160c-3d9f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=322&id=u692e3567&name=image.png&originHeight=423&originWidth=758&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85490&status=done&style=none&taskId=u0c240480-b07e-4e03-8d20-f99edb6f6f5&title=&width=577.5238095238095" alt="image.png"></p><p>配置好连接后，将图片拖到虚线框中就可以方便的上传到图床空间，实现的机制就是token验证。</p><p>建立连接的方法也很简单，在picgo的官方文档就给出了详细的教程（包含github、七牛图库、阿里云OSS都有）：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">配置手册 | PicGo</a></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750320674-dbb881cc-53e3-4484-9eff-ac8b2f224815.png#clientId=ufcc7160c-3d9f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=293&id=u9a348ddb&name=image.png&originHeight=385&originWidth=776&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95113&status=done&style=none&taskId=udab860cd-e9d6-442f-82e1-c6ba9cb2ef9&title=&width=591.2380952380952" alt="image.png"></p><p>如果在配置过程中有疑问可以观看这个B站视频<a href="https://www.bilibili.com/video/BV1Lt411J7Mp?spm_id_from=333.337.search-card.all.click">PicGo五分钟打造你的私人图床（稳定、快速、免费）_哔哩哔哩_bilibili</a></p><p>这是SMMS图床上传后的界面：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750328084-4f3d129a-518d-4537-8ce4-5ca0da627003.png#clientId=ufcc7160c-3d9f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=195&id=u3042c5f5&name=image.png&originHeight=256&originWidth=760&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39316&status=done&style=none&taskId=u73750f69-6526-4188-ac57-eae3c1d9564&title=&width=579.047619047619" alt="image.png"></p><h2 id="二、转码"><a href="#二、转码" class="headerlink" title="二、转码"></a>二、转码</h2><p>这个方法简单粗暴，就是将图片转换为一段代码，就可以将其以文字的形式嵌入markdown文档</p><h3 id="1-通过在线网站"><a href="#1-通过在线网站" class="headerlink" title="1 通过在线网站"></a>1 通过在线网站</h3><p><a href="http://www.jsons.cn/img2base64">图片在线转换base64编码-在线base64编码转换成图片工具 (jsons.cn)</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750338047-16991d1b-be75-4141-b84d-8c041c929899.png#clientId=ufcc7160c-3d9f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=283&id=u8f82ce94&name=image.png&originHeight=371&originWidth=784&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76946&status=done&style=none&taskId=udeb679af-3d94-405e-80a0-20fd65cc179&title=&width=597.3333333333334" alt="image.png"></p><h3 id="2-通过运行python代码"><a href="#2-通过运行python代码" class="headerlink" title="2 通过运行python代码"></a>2 通过运行python代码</h3><p>参考<a href="https://blog.csdn.net/weixin_35757704/article/details/123466261">python图片转base64编码，与base64编码转图片_呆萌的代Ma的博客-CSDN博客_python 图片base64编码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">img_to_base64</span>(<span class="hljs-params">image_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;图片转base64，返回byte类型&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> image_file:<br>        data = base64.b64encode(image_file.read())<br>        <span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_to_img</span>(<span class="hljs-params">base64_data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;base64转图片&quot;&quot;&quot;</span><br>    source_image = Image.<span class="hljs-built_in">open</span>(BytesIO(base64.b64decode(base64_data)))<br>    source_image.show()  <span class="hljs-comment"># 展示图片</span><br>    <span class="hljs-keyword">return</span> source_image<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    base64_d = img_to_base64(<span class="hljs-string">&quot;this_img.png&quot;</span>)  <span class="hljs-comment"># 路径转base64</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base64的值：&quot;</span>, base64_d.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)[:<span class="hljs-number">40</span>], <span class="hljs-string">&quot;....&quot;</span>)  <span class="hljs-comment"># 打印base64的前40个字符</span><br>    image = base64_to_img(base64_d)<br>    image.save(<span class="hljs-string">&quot;本地图片.png&quot;</span>)  <span class="hljs-comment"># 保存图片</span><br></code></pre></td></tr></table></figure><h3 id="3-通过typora"><a href="#3-通过typora" class="headerlink" title="3 通过typora"></a>3 通过typora</h3><p>刚刚发现将图片复制进typora后会自动转换。所以就可以实现一种操作：</p><p>先在word的工具上写好文档，然后整个复制到typora中，就生成了最终能上传的文档。</p><h3 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4 缺点"></a>4 缺点</h3><p>图片的信息量很大，转换出来的编码也很长，如下</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750349171-9f14e687-9f4f-4a20-a3a7-40df2b04bb70.png#clientId=ufcc7160c-3d9f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=376&id=ue7f0251b&name=image.png&originHeight=493&originWidth=764&originalType=binary&ratio=1&rotation=0&showTitle=false&size=604955&status=done&style=none&taskId=u6adf80de-41a4-4bda-91b9-fbd4e2f8cb3&title=&width=582.0952380952381" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇总结了markdown中图片的处理方法，第一种是利用图床，方便快捷，但需要进行相关配置；第二种利用转码，可以将图片嵌入markdown文件，但是编码很长，很不美观。但是两种方法的操作都不困难。</p>]]></content>
    
    
    <categories>
      
      <category>各类教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑远程控制</title>
    <link href="/2022/06/16/03%E7%94%B5%E8%84%91%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/06/16/03%E7%94%B5%E8%84%91%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>最近探索了两种远程控制的方法。</p><blockquote><p><strong>第一种是用向日葵</strong>，使用方法非常简单，只需要在ipad和电脑上都下载向日葵，输入相应的访问号后就能直接实现访问，连接速度、稳定性都很不错，不好的一点就是<strong>交互性很差</strong>，鼠标的邮右键和滚轮无法操作，这对于经常使用电脑已经习惯电脑操作的人几乎无法接受。所以以后可以单用向日葵来传输电脑上的文件。<br><strong>另一款软件是RDcient</strong>，这个软件利用的是windows系统自己的远程访问功能，所以克服了不能使用邮件和滚轮的问题，所有的操作都和电脑一模一样，所以只要有个可以蓝牙连接ipad的键盘还有鼠标可以完美的实现远程办公。但是它的配置过程稍微复杂一些，而且还需要window是专业版（因为远程功能是专业版才会提供的。同时另一个致命问题是rdclient只能实现统一局域网下访问，但是有其他方法能实现外网的访问。</p></blockquote><p>本文就来介绍RDclient的具体步骤（包括windows专业版激活、RDclient的配置以及如何实现外网访问）</p><h3 id="1-window专业版激活"><a href="#1-window专业版激活" class="headerlink" title="1. window专业版激活"></a><strong>1. window专业版激活</strong></h3><p>这个很简单，可以在百度上搜索相应的激活码，但是可能大多失效。可以去淘宝上买激活码，也就几块钱，商家也会给教程，教你一步步操作。</p><h3 id="2-RDclient配置"><a href="#2-RDclient配置" class="headerlink" title="2. RDclient配置"></a><strong>2. RDclient配置</strong></h3><p>在ipad应用中心下载软件。之后会让填写相应的用户信息：</p><ol><li>名称写为IP地址</li><li>用户名和密码是你登录windows时的微软账号密码</li><li>网关写为默认网关，网关界面中的用户还是选择之前设置好的微软账户</li><li>保存后即可实现访问</li></ol><p>ip地址和默认网关可以在电脑运行框中输入ifconfig现实。<br>运行框的唤起方法：：win+r 在小框中输入cmd<br><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656750133093-f388befe-16be-4562-a6f5-8b6e31e811ff.png#clientId=u7f180abb-9154-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=130&id=u95378e37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=170&originWidth=760&originalType=binary&ratio=1&rotation=0&showTitle=false&size=89834&status=done&style=none&taskId=u08800f33-8f04-47fd-9d89-ebb3253f60d&title=&width=579.047619047619" alt="image.png"></p><h3 id="3-实现外网访问"><a href="#3-实现外网访问" class="headerlink" title="3. 实现外网访问"></a><strong>3. 实现外网访问</strong></h3><p>实现外网访问的原理很简单：让外网伪装成局域网，可以用到一个软件叫蒲公英，在电脑上下载一个，在平板上下载一个，注册账号使其运行，两个地方使用同一账号登录后就会自动组网，变成虚拟的局域网，至于这个虚拟局域网的ip网址可以在蒲公英管理平台这个网页看到。（蒲公英的下载地址不好找，直接贴在这里<a href="https://pgy.oray.com/download/personal/#visitor">蒲公英软件客户端官方下载 - 贝锐蒲公英官网 (oray.com)</a>）<br>当知道虚拟ip后，再用ipconfig指令查看ipv4的地址，找到其中是虚拟ip的那个（两个很相似），然后查看对应的网关，知道这些信息后，就像之前配置RDclient的操作一边，再建立一个连接，这就实现了外网访问。（但要注意，ipad和电脑上的蒲公英必须保持运行的状态）</p>]]></content>
    
    
    <categories>
      
      <category>各类教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>电脑远程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown语法</title>
    <link href="/2022/06/13/02MarkDown%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/06/13/02MarkDown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章记录一些Markdown的语法，为以后写博客做好准备。<br>参考学习文章：<a href="https://blog.csdn.net/u014061630/article/details/81359144">https://blog.csdn.net/u014061630/article/details/81359144</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文章分为四部分内容：快捷键、基本语法、常用技巧、软件推荐。</p><h2 id="一、快捷键"><a href="#一、快捷键" class="headerlink" title="一、快捷键"></a>一、快捷键</h2><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>加粗</td><td>Ctrl+B</td></tr><tr><td>斜体</td><td>Ctrl+I</td></tr><tr><td>引用</td><td>Ctrl + Q</td></tr><tr><td>插入链接</td><td>Ctrl + L</td></tr><tr><td>插入代码</td><td>Ctrl + K</td></tr><tr><td>插入图片</td><td>Ctrl + G</td></tr><tr><td>提升标题</td><td>Ctrl + H</td></tr><tr><td>有序列表</td><td>Ctrl + O</td></tr><tr><td>无序列表</td><td>Ctrl + U</td></tr><tr><td>横线</td><td>Ctrl + R</td></tr><tr><td>撤销</td><td>Ctrl + Z</td></tr><tr><td>重做</td><td>Ctrl + Y</td></tr></tbody></table><h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><h4 id="2-1-标题分级"><a href="#2-1-标题分级" class="headerlink" title="2.1 标题分级"></a>2.1 标题分级</h4><p><strong>共支持六级标题</strong></p><p>一级标题：# 一级</p><p>二级标题：## 二级</p><p>三级标题：### 三级</p><p>效果如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749553072-0659f39d-1e5e-46b4-a3bb-f32da38b1093.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=203&id=ubf2dc60e&name=image.png&originHeight=266&originWidth=240&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14782&status=done&style=none&taskId=udc8a66c0-7b2d-4cd6-a612-6be35f7c949&title=&width=182.85714285714286" alt="image.png"><br>（4-6级依次类推）</p><h4 id="2-2字体的斜体、粗体、删除线"><a href="#2-2字体的斜体、粗体、删除线" class="headerlink" title="2.2字体的斜体、粗体、删除线"></a>2.2字体的斜体、粗体、删除线</h4><p>倾斜1：*演示文字*</p><p>倾斜2：_演示文字_</p><p>加粗1：**演示文字**</p><p>倾斜加粗：***演示文字***</p><p>删除线：~~演示文字~~</p><p>效果如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749561236-b86afdea-6b13-4730-93c0-2e5aa01792fa.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=166&id=uc8c8e2ad&name=image.png&originHeight=218&originWidth=276&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42608&status=done&style=none&taskId=ua64d4457-812f-4886-b3e5-6edcf67dfba&title=&width=210.28571428571428" alt="image.png"></p><h4 id="2-3代码块"><a href="#2-3代码块" class="headerlink" title="2.3代码块"></a>2.3代码块</h4><p>`&#96;&#96;<br>代码内容<br>import numpy as np<br>import pandas as pd<br>`&#96;&#96;</p><p>效果演示：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm">代码内容：<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h4 id="2-4引用"><a href="#2-4引用" class="headerlink" title="2.4引用"></a>2.4引用</h4><p>&gt;引用1</p><p>&gt;&gt;引用2</p><p>&gt;&gt;&gt;引用3</p><p>效果演示：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749569223-f4a7d832-2c3e-4a45-8c3b-16d01e23bf39.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=240&id=ubbaf4df3&name=image.png&originHeight=315&originWidth=237&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7297&status=done&style=none&taskId=u2efd95b2-6f58-48c0-9802-2ec3eedcc76&title=&width=180.57142857142858" alt="image.png"></p><p>还可进行嵌套：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749575354-0515b5aa-b6ba-4591-978e-7ce2f663cd4f.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=158&id=u8bdf516f&name=image.png&originHeight=207&originWidth=323&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6889&status=done&style=none&taskId=u12336552-60a7-477d-8e78-9287e4e0175&title=&width=246.0952380952381" alt="image.png"></p><h4 id="2-5有序列表与无需列表"><a href="#2-5有序列表与无需列表" class="headerlink" title="2.5有序列表与无需列表"></a>2.5有序列表与无需列表</h4><blockquote><p>无序列表</p></blockquote><p>- 第一行</p><p>- 第二行</p><p>- 第三行</p><p>（注意-后面必须加一个空格才能生效）</p><p>效果演示：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749583241-5f3c2e7e-59f4-4cfd-96d7-1ddedfaeb3a9.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=130&id=uee907fe0&name=image.png&originHeight=170&originWidth=167&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9051&status=done&style=none&taskId=u5dde10d2-17f3-46c4-be46-90f7d1b7bae&title=&width=127.23809523809524" alt="image.png"></p><blockquote><p>有序列表</p></blockquote><p>1.(空格)第一行</p><p>2.(空格)第二行</p><p>3.(空格)第三行</p><p>效果演示：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749590936-eb6669e7-1b78-4fa2-94a2-e4172cd4cfe9.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=125&id=u1eb580c5&name=image.png&originHeight=164&originWidth=188&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9409&status=done&style=none&taskId=u7ee3e5cb-1dab-4ac1-90dd-2a933d578c6&title=&width=143.23809523809524" alt="image.png"></p><h4 id="2-6表格"><a href="#2-6表格" class="headerlink" title="2.6表格"></a>2.6表格</h4><blockquote><p>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行</p></blockquote><p>|  表头    | 表头  |<br>|  - - - -  | - - - -  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |</p><p>效果演示：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="三、特殊用法"><a href="#三、特殊用法" class="headerlink" title="三、特殊用法"></a>三、特殊用法</h2><h4 id="3-1-想输出某个符号，不想让它作为语法标记符，使用-，-后面加的字符会显示出来"><a href="#3-1-想输出某个符号，不想让它作为语法标记符，使用-，-后面加的字符会显示出来" class="headerlink" title="3.1 想输出某个符号，不想让它作为语法标记符，使用\，\后面加的字符会显示出来"></a>3.1 想输出某个符号，不想让它作为语法标记符，使用\，\后面加的字符会显示出来</h4><h4 id="3-2-如果想更换字体"><a href="#3-2-如果想更换字体" class="headerlink" title="3.2 如果想更换字体"></a>3.2 如果想更换字体</h4> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span>&gt;</span>我是黑体字<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;微软雅黑&quot;</span>&gt;</span>微软雅黑<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;楷体&quot;</span>&gt;</span>楷体<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果演示</p><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/01/11/kuangstudybcae9639-a98b-4dcd-86ce-3d2a40e1a51f.png#crop=0&crop=0&crop=1&crop=1&id=Q7UxV&originHeight=137&originWidth=174&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="3-3-规定颜色和大小"><a href="#3-3-规定颜色和大小" class="headerlink" title="3.3 规定颜色和大小"></a>3.3 规定颜色和大小</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;font <span class="hljs-attribute">color</span>=#1157ff <span class="hljs-attribute">size</span>=4 <span class="hljs-attribute">face</span>=<span class="hljs-string">&quot;宋体&quot;</span>&gt;颜色为#11577ff，大小为4的宋体&lt;/font&gt;<br></code></pre></td></tr></table></figure><p>演示效果</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749604581-9f9b94ed-355f-4a34-af29-ba911cfa27ae.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=56&id=u70fb10a5&name=image.png&originHeight=73&originWidth=489&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11890&status=done&style=none&taskId=u5a06b5e7-6438-483a-a010-40a9272a603&title=&width=372.57142857142856" alt="image.png"></p><h2 id="四、软件推荐"><a href="#四、软件推荐" class="headerlink" title="四、软件推荐"></a>四、软件推荐</h2><p>Typora 是一款支持实时预览的 Markdown 文本编辑器。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是完全免费的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/759833/1656749615115-f012e148-d1b7-444b-8a56-b72cebdc7c10.png#clientId=ueff216f1-536b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=119&id=ub064df53&name=image.png&originHeight=156&originWidth=751&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17616&status=done&style=none&taskId=u1a1af3be-8d10-42e9-bd67-ab7838d18bc&title=&width=572.1904761904761" alt="image.png"><br>下载地址：<a href="https://www.typora.io/">https://www.typora.io/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍的是markdown的基础部分，除此之外还有能写出公式的latex语法以及绘制流程图的操作，这些知识以后有时间继续总结</p>]]></content>
    
    
    <categories>
      
      <category>各类教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的基本使用</title>
    <link href="/2022/06/12/01hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/12/01hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>这是第一篇文章，简单记录一下hexo发布文章、部署服务器等使用命令。</p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span>   引号中写文章名称<br></code></pre></td></tr></table></figure><p>更多信息访问: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>更多信息访问: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate     这个命令可以简化为 hexo g<br></code></pre></td></tr></table></figure><p>更多信息访问: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到网站"><a href="#部署到网站" class="headerlink" title="部署到网站"></a>部署到网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy    这个命令可以简写为 hexo d<br></code></pre></td></tr></table></figure><p>更多信息访问: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h2><h3 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 给文章添加一个分类。</span><br>categories: 1<br><span class="hljs-comment"># 这会将文章分类1/2子分类目录下。</span><br>categories: [1, 2]<br><span class="hljs-comment">#多分类，文章被分类到123、456以及123的自分类789这3个分类下面</span><br><span class="hljs-comment">#注意-后面有一个空格</span><br>categories:<br>   - [123]   <br>   - [456]<br>   - [123, 789]<br></code></pre></td></tr></table></figure><h3 id="文章标签"><a href="#文章标签" class="headerlink" title="文章标签"></a>文章标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#两种不同的写法</span><br>tags:<br>  - 123<br>  - 456<br>tags: [123, 456]<br></code></pre></td></tr></table></figure><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">excerpt: 这里写简介内容<br></code></pre></td></tr></table></figure><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><h3 id="有时在”hexo-d”后会出现error的提示"><a href="#有时在”hexo-d”后会出现error的提示" class="headerlink" title="有时在”hexo d”后会出现error的提示"></a>有时在”hexo d”后会出现error的提示</h3><p>可以依次执行下面三条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo d<br></code></pre></td></tr></table></figure><h3 id="一段时间后突然hexo命令失效"><a href="#一段时间后突然hexo命令失效" class="headerlink" title="一段时间后突然hexo命令失效"></a>一段时间后突然hexo命令失效</h3><p>之前看的教程里环境变量的配置是错误的，也不知道当时是怎么运行的，这里再简单重新记录一下<br>之前的：D:*******\NODE_JS\node_global\node_modules\hexo-cli\node_modules.bin<br>现在的：D:*******\NODE_JS\node_global\node_modules\hexo-cli\bin<br>后者是正确的</p>]]></content>
    
    
    <categories>
      
      <category>各类教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
